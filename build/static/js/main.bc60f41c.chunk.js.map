{"version":3,"sources":["logic/image-reader.ts","logic/bw-image-reader.ts","logic/solver.ts","logic/gradient.ts","logic/read-and-solve.ts","components/read-and-solve.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ImageReader","width","height","data","this","x","y","i","BWImage","averageColor","v","buff","Uint8ClampedArray","getPixel","newArray","Uint8Array","set","threshhold","corners","hiContrast","Math","floor","t","fill","setPixel","l","r","b","xPlus","xMinus","yPlus","yMinus","colorImage","nPixels","bwData","sum","avg","colorData","getData","console","log","w","h","WordSearch","letters","words","confidences","boxes","tst","map","toUpperCase","m","TST","initTST","length","Error","line","Array","from","yieldLine","join","add","dx","dy","reverse","solutions","word","get","forEach","p","push","start","end","dir","a","getBoxCenter","startX","startY","dirs","undefined","box","index","letter","sb","TSTNode","childL","childR","childM","endings","info","s","newNode","addEnding","createToBottom","root","getRecurse","curr","startIndex","addRecurse","node","Gradient","stops","positions","n","c","analyzeBoxes","contexts","cropBoxes","Float32Array","max","padX","ceil","padY","x1","y1","x2","y2","boxIndices","Int32Array","allImageData","imageTensor","tf","boxTensor","boxIndicesTensor","CROP_SIZE","resizedTensor","cropAndResize","shape","infer","canvas","img","g","stoplight","lineWidth","strokeStyle","eval","beginPath","rect","stroke","Promise","resolve","reject","model","out","predict","ds","dataSync","maxes","normalized","normalize","o","arrayMax","slice","min","arrayMin","d","WordsearchSolver","imgCanvas","useRef","boxCanvas","letterCanvas","lineCanvas","useState","puzzle","setPuzzle","wordString","setWordString","imgVisible","setImgVisible","boxesVisible","setBoxesVisible","linesVisible","setLinesVisible","lettersVisible","setLettersVisible","rescaleVal","setRescaleVal","letterOffset","setLetterOffset","letterStyle","setLetterStyle","changeLetterModal","setChangeLetterModal","onFileInput","e","current","getContext","target","files","f","image","Image","src","window","URL","webkitURL","createObjectURL","onload","screenWidth","outerWidth","rescale","drawImage","idt","getImageData","bw","fromColor","toFill","copy","newBlank","getAverageColor","getPixeli","fillFromi","maxHeight","reduce","filteredBoxes","filter","sort","ws","analyzeImage","getWords","then","split","splice","pop","englishwords","reSolve","setWords","solve","lineCtx","clearRect","moveTo","lineTo","ctx","xProp","yProp","outerHeight","big","useEffect","addEventListener","removeEventListener","toString","imgCtx","letterCtx","fontSize","font","fillStyle","getLetters","getBoxes","getConfidence","fillText","drawPuzzle","newLetterStyle","display","toDisp","transform","className","type","onChange","imgPath","Tesseract","recognize","res","text","catch","err","alert","readWords","rows","value","onClick","ChangeLetterModal","puzzleWidth","close","newLetter","changeLetter","onChangeSumbit","style","ref","getBoundingClientRect","clientX","left","clientY","top","clicked","inBox","canvasClick","props","setNewLetter","onSubmit","autoFocus","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bc60f41c.chunk.js","sourcesContent":["import {BWImage} from './bw-image-reader';\n\nexport class ImageReader {\n  constructor(public width: number, public height: number, private data: ImageData) {\n    this.width = width;\n    this.height = height;\n    this.data = data;\n  }\n\n  getData() {\n    return this.data\n  }\n\n  getPixel(x: number, y: number) {\n    const i = this.width * x + y;\n    return [this.data.data[i], this.data.data[i + 1], this.data.data[i + 2], this.data.data[i + 3]]\n  }\n\n}","import { ImageReader } from \"./image-reader\";\n\ntype Corners = {l: number, r: number, t: number, b: number}\n\nexport class BWImage {\n  // mostly for internal use, usually using fromColor() or copy()\n  constructor(private data: Uint8Array, \n              public width: number, \n              public height: number, \n              private averageColor: number) {}\n\n  static fromColor(colorImage: ImageReader) {\n    const nPixels = colorImage.width * colorImage.height;\n    const bwData = new Uint8Array(nPixels);\n    let sum = 0;\n    let avg = 0;\n    const colorData: Uint8ClampedArray = colorImage.getData().data;\n    for (let i = 0; i < nPixels; i++) {\n      if (i == 14235) console.log((colorData[4 * i] + colorData[4 * i + 1] + colorData[4 * i + 2]))\n      avg = Math.floor((colorData[4 * i] + colorData[4 * i + 1] + colorData[4 * i + 2]) / 3);\n      sum += avg;\n      bwData[i] = avg;\n    }\n    console.log(sum, nPixels)\n    return new BWImage(bwData, colorImage.width, colorImage.height, Math.floor(sum / nPixels))\n  }\n\n  static newBlank(w: number, h: number) {\n    return new BWImage(new Uint8Array(w * h).fill(255), w, h, 255);\n  }\n\n  getData() {\n    return this.data;\n  }\n\n  getAverageColor() {\n    return this.averageColor;\n  }\n\n  getPixeli(i: number) {\n    return this.data[i]\n  }\n\n  getPixel(x: number, y: number) {\n    return this.data[x + this.width * y]\n  }\n\n  setPixel(x: number, y: number, v: number) {\n    this.data[x + this.width * y] = v;\n  }\n\n  toCanvas() {\n    const buff = new Uint8ClampedArray(this.width * this.height * 4);\n    for (var x = 0; x < this.width; x++) {\n      for (var y = 0; y < this.height; y++) {\n        buff[4 * (y * this.width + x)] = this.getPixel(x, y)\n        buff[1 + 4 * (y * this.width + x)] = this.getPixel(x, y)\n        buff[2 + 4 * (y * this.width + x)] = this.getPixel(x, y)\n        buff[3 + 4 * (y * this.width + x)] = 255\n      }\n    }\n    return buff;\n  }\n\n  copy() {\n    const newArray = new Uint8Array(this.width * this.height);\n    newArray.set(this.data);\n    return new BWImage(\n      newArray,\n      this.width,\n      this.height,\n      this.averageColor)\n  }\n\n  fillFromi(i: number, threshhold: number, corners: Corners, hiContrast: BWImage) {\n    const x = Math.floor(i % this.width);\n    const y = Math.floor(i / this.width);\n    const t = hiContrast;\n    this.fill(x, y, threshhold, corners, t)\n  }\n\n  fill(x: number, y: number, threshhold: number, corners: Corners, hiContrast: BWImage) {\n    if (this.getPixel(x, y) < threshhold) {\n      this.setPixel(x, y, 255);\n      hiContrast.setPixel(x, y, 0);\n      if (x < corners.l) corners.l = x;\n      if (x > corners.r) corners.r = x;\n      if (y < corners.t) corners.t = y;\n      if (y > corners.b) corners.b = y;\n\n      const xPlus = (x > 0)\n      const xMinus = (x < this.width - 1)\n      const yPlus = (y > 0)\n      const yMinus = (y < this.height - 1)\n\n      // Can definitely optimize checks\n      if (xMinus) this.fill(x - 1, y, threshhold, corners, hiContrast);\n      if (xPlus) this.fill(x + 1, y, threshhold, corners, hiContrast);\n      if (yMinus) this.fill(x, y - 1, threshhold, corners, hiContrast);\n      if (yPlus) this.fill(x, y + 1, threshhold, corners, hiContrast);\n\n      if (xMinus && yMinus) this.fill(x - 1, y - 1, threshhold, corners, hiContrast);\n      if (xMinus && yPlus) this.fill(x - 1, y + 1, threshhold, corners, hiContrast);\n      if (xPlus && yMinus) this.fill(x + 1, y - 1, threshhold, corners, hiContrast);\n      if (xPlus && yPlus) this.fill(x + 1, y + 1, threshhold, corners, hiContrast);\n    }\n  }\n\n}","type Solution = { word: string, start: [number, number], end: [number, number] }\n\nexport class WordSearch {\n  private letters: string[];\n  private tst: TST;\n  private words: string[];\n  constructor(\n    letters: string[],\n    public width: number,\n    public height: number,\n    words: string[],\n    private confidences: number[],\n    private boxes: number[][]) {\n    this.letters = letters.map((l) => l.toUpperCase())\n    this.words = ['as'].map(m => m.toUpperCase()) || []\n    this.words = words.map(m => m.toUpperCase()) || [];\n    this.tst = new TST();\n    this.initTST();\n    if (this.letters.length !== this.boxes.length) {\n      throw new Error('Length mismatch between boxes and letters.');\n    }\n  }\n  \n  initTST() {\n    this.tst = new TST();\n    // horizontal\n    for (let y = 0; y < this.height; y++) {\n      const line = Array.from(this.yieldLine(0, y, [1, 0])).join(\"\");\n      for (let i = 0; i < line.length; i++) {\n        this.tst.add(line, {x: i, y: y, dx: 1, dy: 0}, i);\n      }\n      const reverse = Array.from(\n        this.yieldLine(this.width - 1, y, [-1, 0])\n      ).join(\"\");\n      for (let i = 0; i < reverse.length; i++) {\n        this.tst.add(reverse, {x: this.width - i - 1, y: y, dx: -1, dy: 0}, i);\n      }\n    }\n    // vertical\n    for (let x = 0; x < this.width; x++) {\n      const line = Array.from(this.yieldLine(x, 0, [0, 1])).join(\"\");\n      for (let i = 0; i < line.length; i++) {\n        this.tst.add(line, {x: x, y: i, dx: 0, dy: 1}, i);\n      }\n      console.log(line)\n      const reverse = Array.from(\n        this.yieldLine(x, this.height - 1, [0, -1])\n      ).join(\"\");\n      console.log(reverse);\n      for (let i = 0; i < reverse.length; i++) {\n        this.tst.add(reverse, {x: x, y: this.height - i - 1, dx: 0, dy: -1}, i);\n      }\n    }\n    // diagonal down right\n    for (let y = this.height - 1; y >= 0; y--) {\n      const line = Array.from(this.yieldLine(0, y, [1, 1])).join(\"\");\n      for (let i = 0; i < line.length; i++) {\n        this.tst.add(line, {x: 0, y: y, dx: 1, dy: 1}, i);\n      }\n    }\n    for (let x = 1; x < this.width; x++) {\n      const line = Array.from(this.yieldLine(x, 0, [1, 1])).join(\"\");\n      for (let i = 0; i < line.length; i++) {\n        this.tst.add(line, {x: x, y: 0, dx: 1, dy: 1}, i);\n      }\n    }\n\t\t// diagonal up left\n    for (let x = 0; x < this.width; x++) {\n      const line = Array.from(this.yieldLine(x, this.height - 1, [-1, -1])).join(\"\");\n      for (let i = 0; i < line.length; i++) {\n        this.tst.add(line, {x: x, y: this.height - 1, dx: -1, dy: -1}, i);\n      }\n    }\n\t\tfor (let y = this.height - 1; y >= 0; y--) {\n      const line = Array.from(this.yieldLine(this.width - 1, y, [-1, -1])).join(\"\");\n      for (let i = 0; i < line.length; i++) {\n        this.tst.add(line, {x: this.width - 1, y: y, dx: -1, dy: -1}, i);\n      }\n    }\n\t\t// diagonal down left\n    for (let x = 0; x < this.width; x++) {\n      const line = Array.from(this.yieldLine(x, 0, [-1, 1])).join(\"\");\n      for (let i = 0; i < line.length; i++) {\n        this.tst.add(line, {x: x, y: 0, dx: -1, dy: 1}, i);\n      }\n    }\n\t\tfor (let y = 1; y < this.height; y++) {\n      const line = Array.from(this.yieldLine(this.width - 1, y, [-1, 1])).join(\"\");\n      for (let i = 0; i < line.length; i++) {\n        this.tst.add(line, {x: this.width - 1, y: y, dx: -1, dy: 1}, i);\n      }\n    }\n\t\t// diagonal up right\n    for (let x = this.width - 1; x >= 0; x--) {\n      const line = Array.from(this.yieldLine(x, this.height - 1, [1, -1])).join(\"\");\n      for (let i = 0; i < line.length; i++) {\n        this.tst.add(line, {x: x, y: this.height - 1, dx: 1, dy: -1}, i);\n      }\n    }\n\t\tfor (let y = this.height - 2; y >= 0; y--) {\n      const line = Array.from(this.yieldLine(0, y, [1, -1])).join(\"\");\n      for (let i = 0; i < line.length; i++) {\n        this.tst.add(line, {x: 0, y: y, dx: 1, dy: -1}, i);\n      }\n    }\n  }\n\n  public solve(): Solution[] {\n    // const answerMap = new Map<string, PositionInfo[]>();\n    console.log(this.letters)\n    const solutions: {word: string, start: [number, number], end: [number, number], dir: [number, number]}[] = [];\n    for (let word of this.words) {\n      // answerMap.set(word, this.tst.get(word));\n      const pos = this.tst.get(word);\n      pos.forEach(p => {\n        const l = word.length;\n        solutions.push({\n          word: word,\n          start: [p.x, p.y],\n          end: [p.x + (word.length - 1) * p.dx, p.y + (word.length - 1) * p.dy],\n          dir: [p.dx, p.dy]\n        })\n      })\n    }\n    console.log(solutions);\n    const withBoxes: Solution[] = solutions.map(a => ({...a, start: this.getBoxCenter(...a.start), end: this.getBoxCenter(...a.end)}))\n    return withBoxes;\n  }\n\n  private *yieldLine(startX: number, startY: number, dirs: [number, number]) {\n    let x = startX,\n      y = startY;\n    while (x >= 0 && x < this.width && y >= 0 && y < this.height) {\n      yield this.letters[x + this.width * y];\n      x += dirs[0];\n      y += dirs[1];\n    }\n  }\n\n  getLetter(x: number, y: number) {\n    return this.letters[this.width * y + x];\n  }\n\n  setWords(words: string[]) {\n    this.words = words.map(w => w.toUpperCase());\n  }\n\n  changeLetter(i: number, l: string) {\n    this.letters[i] = l.toUpperCase();\n    this.initTST();\n  }\n\n  getBoxCenter(x: number, y: number): [number, number] {\n    const b = this.boxes[this.width * y + x]\n    console.log(x,y)\n    return [b[0] + (b[1] - b[0]) / 2, b[2] + (b[3] - b[2]) / 2];\n  }\n\n  getConfidence(i: number) {\n    return this.confidences[i] || 0;\n  }\n\n  // tells whether the given coordinate is inside a box,\n  // returns the index of the box and the letter \n  // undefined if the coordinate is not in a box\n  inBox(x: number, y: number): {index: number, letter: string, box: number[]} | undefined {\n    let r: {index: number, letter: string, box: number[]} | undefined = undefined;\n    this.boxes.forEach((box, i) => {\n      if ((box[0] < x) && (x < box[1]) && (box[2] < y) && (y < box[3])) {\n        r = {index: i, letter: this.letters[i], box};\n      }\n    });\n    return r;\n  }\n\n  getBoxes() {\n    return this.boxes;\n  }\n\n  getLetters() {\n    return this.letters;\n  }\n\n  getWords() {\n    return this.words;\n  }\n\n  toString() {\n    let sb = '';\n    this.letters.forEach((l, i) => {\n      if (i !== 0 && i % this.width == 0) {\n        sb += '\\n'\n      }\n      sb += l + ' '\n    })\n    return sb;\n  }\n\n  // solve() {\n  //   const solutions: Solution[] = [];\n  //   let s;\n  //   let x, y;\n  //   this.letters.forEach((l, i) => {\n  //     this.words.forEach(w => {\n  //       x = i % this.width;\n  //       y = Math.floor(i / this.width)\n  //       s = this.checkWord(w, l, x, y)\n  //       if (s) {\n  //         solutions.push({\n  //           word: w,\n  //           start: this.getBoxCenter(x, y),\n  //           end: this.getBoxCenter(s[0], s[1])\n  //         })\n  //       }\n\n  //     })\n  //   })\n  //   return solutions;\n  // }\n\n  // checkWord(word: string, letter1: string, x: number, y: number): [number, number] | null {\n  //   if (letter1 != word[0])\n  //     return null\n  //   let ret: [number, number] | null = null;\n  //   ret = ret || this.checkLetter(word, 1, x, y, [-1, -1]);\n  //   ret = ret || this.checkLetter(word, 1, x, y, [-1, 0]);\n  //   ret = ret || this.checkLetter(word, 1, x, y, [-1, 1]);\n  //   ret = ret || this.checkLetter(word, 1, x, y, [0, -1]);\n  //   ret = ret || this.checkLetter(word, 1, x, y, [0, 1]);\n  //   ret = ret || this.checkLetter(word, 1, x, y, [1, -1]);\n  //   ret = ret || this.checkLetter(word, 1, x, y, [1, 0]);\n  //   ret = ret || this.checkLetter(word, 1, x, y, [1, 1]);\n  //   return ret;\n  // }\n\n\n  // checkLetter(word: string, index: number, x: number, y: number, vector: [number, number]): [number, number] | null {\n  //   const nx = x + vector[0];\n  //   const ny = y + vector[1];\n  //   if (index >= word.length) {\n\n  //     return [x, y];\n  //   }\n  //   if (nx < 0 || nx >= this.width || ny < 0 || ny >= this.height) {\n  //     return null;\n  //   }\n  //   if (this.getLetter(nx, ny) == word[index]) {\n  //     return this.checkLetter(word, index + 1, nx, ny, vector);\n  //   }\n  //   else {\n  //     return null;\n  //   }\n  // }\n}\n\ntype PositionInfo = {\n  x: number,\n  y: number,\n  dx: number,\n  dy: number,\n}\n\nclass TSTNode {\n  public childL: TSTNode | null = null;\n  public childR: TSTNode | null = null;\n  public childM: TSTNode | null = null;\n  public endings: PositionInfo[] = [];\n  constructor(public letter: string) {}\n\n  public addEnding(info: PositionInfo) {\n    this.endings.push(info);\n  }\n\n  public static createToBottom(\n    s: string,\n    index: number,\n    info: PositionInfo\n  ) {\n    const newNode = new TSTNode(s[index]);\n    if (index === s.length - 1) {\n      newNode.addEnding(info);\n      return newNode;\n    }\n    newNode.childM = this.createToBottom(s, index + 1, info);\n    newNode.addEnding(info);\n    return newNode;\n  }\n}\n\nexport class TST {\n  private root: TSTNode | null = null;\n\n  public get(s: string): PositionInfo[] {\n    if (!this.root) return [];\n    return this.getRecurse(s, 0, this.root);\n  }\n\n  private getRecurse(\n    s: string,\n    index: number,\n    curr: TSTNode\n  ): PositionInfo[] {\n    if (curr.letter === s[index]) {\n      if (index === s.length - 1) return curr.endings;\n      if (curr.childM) return this.getRecurse(s, index + 1, curr.childM);\n      else return [];\n    } else if (s[index] > curr.letter) {\n      if (curr.childR) return this.getRecurse(s, index, curr.childR);\n      else return [];\n    } else {\n      if (curr.childL) return this.getRecurse(s, index, curr.childL);\n      else return [];\n    }\n  }\n\n  public add(s: string, info: PositionInfo, startIndex?: number) {\n    if (!this.root)\n      this.root = TSTNode.createToBottom(s, startIndex || 0, info);\n    this.addRecurse(this.root, s, startIndex || 0, info);\n  }\n\n  private addRecurse(\n    node: TSTNode,\n    s: string,\n    index: number,\n    info: PositionInfo\n  ) {\n    if (s[index] === node.letter) {\n      node.addEnding(info);\n      if (index === s.length - 1) {\n        return;\n      }\n      this.addRecurse(\n        node.childM ||\n          (node.childM = TSTNode.createToBottom(s, index + 1, info)),\n        s,\n        index + 1,\n        info\n      );\n    } else if (s[index] > node.letter) {\n      if (node.childR) {\n        this.addRecurse(node.childR, s, index, info);\n      } else {\n        node.childR = TSTNode.createToBottom(s, index, info);\n      }\n    } else {\n      if (node.childL) {\n        this.addRecurse(node.childL, s, index, info);\n      } else {\n        node.childL = TSTNode.createToBottom(s, index, info);\n      }\n    }\n  }\n}\n\nexport class WordSearchNew {\n  private tst: TST;\n  private width: number;\n  private height: number;\n  constructor(private letters: string[], private words: string[]) {\n    this.width = this.letters[0].length;\n    this.height = this.letters.length;\n    this.tst = new TST();\n    this.initTST();\n  }\n\n  initTST() {\n    this.tst = new TST();\n    // horizontal\n    for (let y = 0; y < this.height; y++) {\n      const line = Array.from(this.yieldLine(0, y, [1, 0])).join(\"\");\n      for (let i = 0; i < line.length; i++) {\n        this.tst.add(line, {x: i, y: y, dx: 1, dy: 0}, i);\n      }\n      const reverse = Array.from(\n        this.yieldLine(this.width - 1, y, [-1, 0])\n      ).join(\"\");\n      for (let i = 0; i < reverse.length; i++) {\n        this.tst.add(reverse, {x: this.width - i - 1, y: y, dx: -1, dy: 0}, i);\n      }\n    }\n    // vertical\n    for (let x = 0; x < this.width; x++) {\n      const line = Array.from(this.yieldLine(x, 0, [0, 1])).join(\"\");\n      for (let i = 0; i < line.length; i++) {\n        this.tst.add(line, {x: x, y: i, dx: 0, dy: 1}, i);\n      }\n      const reverse = Array.from(\n        this.yieldLine(x, this.height - 1, [-1, 0])\n      ).join(\"\");\n      for (let i = 0; i < reverse.length; i++) {\n        this.tst.add(reverse, {x: x, y: this.height - i - 1, dx: -1, dy: 0}, i);\n      }\n    }\n    // diagonal down right\n    for (let y = this.height - 1; y >= 0; y--) {\n      const line = Array.from(this.yieldLine(0, y, [1, 1])).join(\"\");\n      for (let i = 0; i < line.length; i++) {\n        this.tst.add(line, {x: 0, y: y, dx: 1, dy: 1}, i);\n      }\n    }\n    for (let x = 1; x < this.width; x++) {\n      const line = Array.from(this.yieldLine(x, 0, [1, 1])).join(\"\");\n      for (let i = 0; i < line.length; i++) {\n        this.tst.add(line, {x: x, y: 0, dx: 1, dy: 1}, i);\n      }\n    }\n\t\t// diagonal up left\n    for (let x = 0; x < this.width; x++) {\n      const line = Array.from(this.yieldLine(x, this.height - 1, [-1, -1])).join(\"\");\n      for (let i = 0; i < line.length; i++) {\n        this.tst.add(line, {x: x, y: this.height - 1, dx: -1, dy: -1}, i);\n      }\n    }\n\t\tfor (let y = this.height - 1; y >= 0; y--) {\n      const line = Array.from(this.yieldLine(this.width - 1, y, [-1, -1])).join(\"\");\n      for (let i = 0; i < line.length; i++) {\n        this.tst.add(line, {x: this.width - 1, y: y, dx: -1, dy: -1}, i);\n      }\n    }\n\t\t// diagonal down left\n    for (let x = 0; x < this.width; x++) {\n      const line = Array.from(this.yieldLine(x, 0, [-1, 1])).join(\"\");\n      for (let i = 0; i < line.length; i++) {\n        this.tst.add(line, {x: x, y: 0, dx: -1, dy: 1}, i);\n      }\n    }\n\t\tfor (let y = 1; y < this.height; y++) {\n      const line = Array.from(this.yieldLine(this.width - 1, y, [-1, 1])).join(\"\");\n      for (let i = 0; i < line.length; i++) {\n        this.tst.add(line, {x: this.width - 1, y: y, dx: -1, dy: 1}, i);\n      }\n    }\n\t\t// diagonal up right\n    for (let x = this.width - 1; x >= 0; x--) {\n      const line = Array.from(this.yieldLine(x, this.height - 1, [1, -1])).join(\"\");\n      for (let i = 0; i < line.length; i++) {\n        this.tst.add(line, {x: x, y: this.height - 1, dx: 1, dy: -1}, i);\n      }\n    }\n\t\tfor (let y = this.height - 2; y >= 0; y--) {\n      const line = Array.from(this.yieldLine(0, y, [1, -1])).join(\"\");\n      for (let i = 0; i < line.length; i++) {\n        this.tst.add(line, {x: 0, y: y, dx: 1, dy: -1}, i);\n      }\n    }\n  }\n\n  private *yieldLine(startX: number, startY: number, dirs: [number, number]) {\n    let x = startX,\n      y = startY;\n    while (x >= 0 && x < this.width && y >= 0 && y < this.height) {\n      yield this.letters[y][x];\n      x += dirs[0];\n      y += dirs[1];\n    }\n  }\n\n  public solve() {\n    const answerMap = new Map<string, PositionInfo[]>();\n    for (let word of this.words) {\n      answerMap.set(word, this.tst.get(word));\n    }\n    return answerMap;\n  }\n}\nconst test = \n`T I I S I R F R O S T M R E O U I F E L\nE D I L C E I L N A O F A S E O R Y H T\nS E E T E R S O C H R I S T M A S F A S\nA H B D O H W E O Y E T R H C E S I A O\nA E H H T S R C A H N R E S A A N H T I\nD D E R T P O Y E S S D S T E C S P K S\nO O E O H W D H A L T W N H C T E G R O\nI A R R E N I R L N E S E S N E T T I M\nI M V E I A E E T F W S I E D M C T P R\nL H T W H S B I L R S L E S O A A E D O\nB R S U I H T S L E D C E A C O L D A R\nR L T H G O E C A E L D N A C S A H H H\nE R A I C V I N O Z B O O T S A L H C O\nS B E N S E D E C E M B E R R O E B H P\nO L F T K L L E O L P E K A L F W O N S\nS L D R A E N I A D R A Z Z I L B T A H\nE I O L H E T T N N A T I S I M E N E U\nU H P S N O W P H T I R N A M W O N S S\nF C N O S A E S B P T A O G B D L R T R\nE C A L P E R I F G N R B N C E S E N O`;\n","export class Gradient {\n  constructor(private stops: [number, number, number][], \n              private positions: number[]) {}\n\n  eval(n: number) {\n    let index = 0;\n    if (n == 0) {\n      return this.stops[0]\n    }\n    while (n > this.positions[index]) \n      index++\n    const r = (n - this.positions[index - 1]) / (this.positions[index] - this.positions[index - 1])\n    return (this.stops[index - 1].map((c,i) => c + (this.stops[index][i] - c) * r));\n  }\n\n  static stoplight() {\n    return new Gradient([[255, 127, 127], [255, 0, 0], [0, 255, 0]], [0, .5, 1]);\n  }\n}","import { BWImage } from \"./bw-image-reader\";\nimport { ImageReader } from \"./image-reader\";\nimport * as tf from '@tensorflow/tfjs';\nimport { WordSearch } from \"./solver\";\nimport { Gradient } from \"./gradient\";\nimport { Contexts } from \"../components/read-and-solve\";\n\nconst alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\ntype Inference = [string, number][];\n\nexport function analyzeImage(img: ImageReader, words: string[], contexts: Contexts) {\n  console.log('analyzeImage');\n  return new Promise<WordSearch>(async (resolve, reject) => {\n    const bw = BWImage.fromColor(img);\n    const toFill = bw.copy();\n    const hiContrast = BWImage.newBlank(bw.width, bw.height);\n\n    const nPixels = bw.width * bw.height;\n    const threshhold = toFill.getAverageColor() - 25;\n    const corners = { l: toFill.width, r: 0, t: toFill.height, b: 0 }\n    const boxes = [];\n    let c = 0;\n    for (let i = 0; i < nPixels; i++) {\n      if (toFill.getPixeli(i) < threshhold) {\n        corners.l = toFill.width;\n        corners.r = 0;\n        corners.t = toFill.height;\n        corners.b = 0;\n        toFill.fillFromi(i, threshhold, corners, hiContrast)\n        boxes.push([corners.l, corners.r, corners.t, corners.b])\n        c++\n      }\n    }\n    const maxHeight = boxes.reduce((max, i) => Math.max(max, i[3] - i[2]), 0);\n    const filteredBoxes = boxes.filter((b) => b[3] - b[2] > maxHeight * 0.5);\n\n    filteredBoxes.sort((a, b) => a[2] - b[2] > maxHeight ? 1 : a[0] - b[0])\n    const ws = await analyzeBoxes(hiContrast, filteredBoxes, words, contexts);\n    resolve(ws);\n  })\n}\n\nasync function analyzeBoxes(hiContrast: BWImage, boxes: number[][], words: string[], contexts: Contexts) {\n  console.log('analyzeBoxes')\n  const cropBoxes = new Float32Array(boxes.length * 4);\n  const EXTRA_PAD = 5;\n  const w = hiContrast.width - 1;\n  const h = hiContrast.height - 1;\n  boxes.forEach((b, i) => {\n    const dx = b[1] - b[0]\n    const dy = b[3] - b[2]\n    const max = Math.max(dx, dy);\n    const padX = Math.ceil((max - dx) / 2) + EXTRA_PAD;\n    const padY = Math.ceil((max - dy) / 2) + EXTRA_PAD;\n    const x1 = b[0] - padX;\n    const y1 = b[2] - padY;\n    const x2 = b[1] + padX;\n    const y2 = b[3] + padY;\n    cropBoxes[i * 4] = y1 / h;\n    cropBoxes[i * 4 + 1] = x1 / w;\n    cropBoxes[i * 4 + 2] = y2 / h;\n    cropBoxes[i * 4 + 3] = x2 / w;\n  })\n\n  const boxIndices = new Int32Array(boxes.length).fill(0);\n\n  const allImageData = hiContrast.getData();\n\n  // move arrays into tensors to crop the image into letters \n  const imageTensor: tf.Tensor<tf.Rank.R4> = tf.tensor(allImageData, [1, hiContrast.height, hiContrast.width, 1]);\n  const boxTensor: tf.Tensor<tf.Rank.R2> = tf.tensor(cropBoxes, [boxes.length, 4]);\n  const boxIndicesTensor: tf.Tensor<tf.Rank.R1> = tf.tensor(boxIndices, [boxes.length]);\n  const CROP_SIZE: [number, number] = [28, 28]\n  \n  console.log(1, hiContrast.height, hiContrast.width, 1);\n  console.log(boxes.length, 4);\n  console.log(boxes.length);\n\n  // separate images of each letter and send them to tf model\n  const resizedTensor = tf.image.cropAndResize(imageTensor, boxTensor, boxIndicesTensor, CROP_SIZE);\n  console.log(resizedTensor.shape);\n  const letters = await infer(resizedTensor);\n\n  // put boxes on box canvas\n  contexts.box.canvas.width = contexts.img.canvas.width;\n  contexts.box.canvas.height = contexts.img.canvas.height;\n  const g = Gradient.stoplight();\n  contexts.box.lineWidth = 5;\n  boxes.forEach((b, i) => {\n    contexts.box.strokeStyle = `rgb(${g.eval(letters[i][1]).join(',')})`;\n    contexts.box.beginPath();\n    contexts.box.rect(b[0] - 3, b[2] - 3, b[1] - b[0] + 3, b[3] - b[2] + 3)\n    contexts.box.stroke();\n  });\n\n  // find width and height of puzzle\n  let width = 0;\n  while (boxes[width][0] < boxes[width + 1][0]) width++;\n  width++;\n  const height = boxes.length / width;\n  const confidences = letters.map(l => l[1]);\n  console.log(width, height);\n\n  return new WordSearch(letters.map(l => l[0]), width, height, words, confidences, boxes);\n\n  // contexts.line.canvas.width = contexts.img.canvas.width;\n  // contexts.line.canvas.height = contexts.img.canvas.height;\n  // contexts.line.lineWidth = 5;\n  // contexts.line.strokeStyle = '#5555FFFF';\n  // solutions.forEach(s => {\n  //   const start = boxes[s.start[0] + s.start[1] * width];\n  //   const end = boxes[s.end[0] + s.end[1] * width];\n  //   contexts.line.beginPath();\n  //   contexts.line.moveTo(start[0] + (start[1] - start[0]) / 2, start[2] + (start[3] - start[2]) / 2)\n  //   contexts.line.lineTo(end[0] + (end[1] - end[0]) / 2, end[2] + (end[3] - end[2]) / 2)\n  //   contexts.line.stroke();\n  // })\n\n  // contexts.letter.canvas.width = contexts.img.canvas.width;\n  // contexts.letter.canvas.height = contexts.img.canvas.height;\n  // contexts.letter.font = \"bold 30px Arial\";\n  // contexts.letter.fillStyle = '#FF0077FF';\n  // boxes.forEach((s, i) => {\n  //   contexts.letter.fillText(letters[i][0], s[0], s[3]);\n  // })\n}\n\nfunction infer(t: tf.Tensor<tf.Rank.R4>) {\n  console.log('Inferring')\n  return new Promise<Inference>(async (resolve, reject) => {\n    const model = await tf.loadGraphModel('./models/bw_no_rotate/model.json');\n    const out = model.predict(t) as tf.Tensor<tf.Rank>;\n    console.log(out.shape);\n    const ds = out.dataSync();\n    const maxes = Array.from(tf.argMax(out, 1).dataSync());\n    // scale output values linearly between 0 and 1\n    const normalized = normalize(ds, 0, 1);\n    resolve (maxes.map((o, i) => [alphabet[o], arrayMax(normalized.slice(26 * i, 26 * (i + 1)))]))\n  })\n}\n\n\n\n// function showFromTensor(tensor, imageNumber, canvasNum) {\n//   const shape = tensor.shape;\n//   const data = tensor.dataSync();\n//   const imSize = shape[1] * shape[2] * shape[3];\n//   const canvasSize = shape[1] * shape[2] * 4;\n//   const pixels = new Uint8Array(canvasSize)\n//   let c = 0;\n//   for (let i = 0; i < imSize; i++) {\n//     pixels[c++] = data[i + imageNumber * imSize];\n//     pixels[c++] = data[i + imageNumber * imSize];\n//     pixels[c++] = data[i + imageNumber * imSize];\n//     pixels[c++] = 255;\n//   }\n//   const canvas2 = document.getElementById('canvas' + canvasNum);\n//   const ctx = canvas2.getContext('2d');\n//   canvas2.width = shape[2];\n//   canvas2.height = shape[1];\n\n//   const idata = ctx.createImageData(shape[2], shape[1]);\n//   idata.data.set(pixels);\n\n//   ctx.putImageData(idata, 0, 0);\n// }\n\nfunction normalize(data: Float32Array | Int32Array | Uint8Array | number[], a: number, b: number) {\n  console.log(data)\n  const max = arrayMax(data)\n  const min = arrayMin(data)\n  console.log(max, min)\n  return data.map(d => ((d - min) / (max - min)) * (b - a) + a)\n}\n\n\nfunction arrayMax(a: Float32Array | Int32Array | Uint8Array | number[]) {\n  let m = a[0];\n  for (let i = 1; i < a.length; i++) {\n    if (a[i] > m)\n      m = a[i]\n  }\n  return m;\n}\n\nfunction arrayMin(a: Float32Array | Int32Array | Uint8Array | number[]) {\n  let m = a[0];\n  for (let i = 1; i < a.length; i++) {\n    if (a[i] < m)\n      m = a[i]\n  }\n  return m;\n}","import React, { useEffect, useRef, useState } from \"react\";\nimport { ImageReader } from \"../logic/image-reader\";\nimport { analyzeImage } from \"../logic/read-and-solve\";\nimport englishwords from \"../logic/usa2.json\";\nimport '../App.css';\nimport { WordSearch } from \"../logic/solver\";\nimport Tesseract, { recognize } from \"tesseract.js\";\nimport { Gradient } from \"../logic/gradient\";\nexport type Contexts = {\n  img: CanvasRenderingContext2D,\n  box: CanvasRenderingContext2D,\n  letter: CanvasRenderingContext2D,\n  line: CanvasRenderingContext2D\n}\n\nexport type ImageLetter = {\n  l: number, r: number, t: number, b: number,\n  letter: string,\n\n}\n\nexport function WordsearchSolver() {\n  const imgCanvas = useRef<HTMLCanvasElement>(null);\n  const boxCanvas = useRef<HTMLCanvasElement>(null);\n  const letterCanvas = useRef<HTMLCanvasElement>(null);\n  const lineCanvas = useRef<HTMLCanvasElement>(null);\n  const [puzzle, setPuzzle] = useState<WordSearch>();\n  const [wordString, setWordString] = useState<string>('');\n  const [imgVisible, setImgVisible] = useState<boolean>(true);\n  const [boxesVisible, setBoxesVisible] = useState<boolean>(false);\n  const [linesVisible, setLinesVisible] = useState<boolean>(true);\n  const [lettersVisible, setLettersVisible] = useState<boolean>(false);\n  const [rescaleVal, setRescaleVal] = useState<number>(1);\n  const [letterOffset, setLetterOffset] = useState<number>(0);\n  const [letterStyle, setLetterStyle] = useState<any>();\n  const [changeLetterModal, setChangeLetterModal] = useState<{\n    ctx: CanvasRenderingContext2D,\n    index: number,\n    letter: string,\n    box: number[],\n    puzzleWidth: number\n  } | undefined>();\n\n  useEffect(() => {\n    window.addEventListener('resize', rescale);\n    return (() => window.removeEventListener('resize', rescale))\n  }, [])\n\n  useEffect(() => {\n    drawPuzzle();\n  }, [puzzle])\n\n  function test() {\n    return `scale(${rescaleVal}) translateX(${letterOffset}px)`\n  }\n\n  useEffect(() => {\n    const newLetterStyle = {\n      display: toDisp(lettersVisible),\n      transform: test()\n    };\n    setLetterStyle(newLetterStyle)\n  }, [lettersVisible, rescaleVal, letterOffset])\n\n  function readWords(e: React.ChangeEvent<HTMLInputElement>) {\n    if (e.target.files?.length && e.target.files.length > 0) {\n      const imgPath: string = URL.createObjectURL(e.target.files[0]);\n      console.log('REcognizing')\n      console.log(imgPath)\n      Tesseract.recognize(imgPath, 'eng')\n      .then(res => {\n        console.log(res);\n        setWordString(res.data.text);\n      })\n      .catch(err => console.log(err));\n    } else {\n      alert('Invalid file');\n    }\n  }\n\n  function onFileInput(e: React.ChangeEvent<HTMLInputElement>) {\n    const img = imgCanvas.current?.getContext('2d');\n    const box = boxCanvas.current?.getContext('2d');\n    const letter = letterCanvas.current?.getContext('2d');\n    const line = lineCanvas.current?.getContext('2d');\n    if (!(img && box && letter && line)) return;\n    const contexts: Contexts = { img, box, letter, line };\n    if (e.target.files?.length && e.target.files.length > 0) {\n      const f: File = e.target.files[0];\n      const image = new Image();\n      const url = window.URL || window.webkitURL,\n        src = url.createObjectURL(f);\n      image.src = src;\n      image.onload = () => {\n        const screenWidth = window.outerWidth;\n        const w = Math.min(screenWidth, 400);\n        const h = (w / image.width) * image.height;\n        img.canvas.width = image.width;\n        img.canvas.height = image.height;\n        rescale();\n\n        img.drawImage(image, 0, 0, image.width, image.height)\n        console.log(\"Image size: \", image.width, 'x', image.height)\n        const idt = img.getImageData(0, 0, image.width, image.height)\n        console.log(idt)\n        const imgRead = new ImageReader(image.width, image.height, idt)\n        // set loading true\n        analyzeImage(imgRead, getWords(), contexts)\n          .then((ws) => {\n            setPuzzle(ws);\n          });\n      }\n    }\n  }\n\n  function getWords() {\n    const words = wordString.split(/[^a-zA-Z0-9]+/);\n    if (words[0] == '') words.splice(0, 1);\n    if (words[words.length - 1] == '') words.pop();\n    if (words.length > 0) {\n      console.log(words);\n      return words;\n    }\n    return englishwords.filter(w => w.length > 3);\n  }\n\n  function drawPuzzle() {\n    if (!puzzle) return;\n    const solutions = puzzle.solve();\n    console.log(solutions);\n    console.log(\"Found\", solutions.length, \"words out of\", puzzle.getWords().length)\n    console.log(puzzle.toString())\n\n    const imgCtx = imgCanvas.current?.getContext('2d');\n    if (!imgCtx) return;\n\n    const lineCtx = lineCanvas.current?.getContext('2d');\n    if (lineCtx) {\n      lineCtx.canvas.width = imgCtx.canvas.width;\n      lineCtx.canvas.height = imgCtx.canvas.height;\n      lineCtx.lineWidth = 5;\n      lineCtx.strokeStyle = '#5555FFFF';\n      solutions.forEach(s => {\n        lineCtx.beginPath();\n        lineCtx.moveTo(s.start[0], s.start[1])\n        lineCtx.lineTo(s.end[0], s.end[1])\n        lineCtx.stroke();\n      })\n    }\n\n    const letterCtx = letterCanvas.current?.getContext('2d');\n    if (letterCtx) {\n      const fontSize = Math.floor(.5 * imgCtx.canvas.width / puzzle.width);\n      letterCtx.canvas.width = imgCtx.canvas.width;\n      letterCtx.canvas.height = imgCtx.canvas.height;\n      letterCtx.font = `bold ${fontSize}px Arial`;\n      letterCtx.fillStyle = '#FF0077FF';\n      const letters = puzzle.getLetters();\n      const g = Gradient.stoplight();\n      puzzle.getBoxes().forEach((s, i) => {\n        letterCtx.fillStyle = `rgb(${g.eval(puzzle.getConfidence(i)).join(',')})`;\n        letterCtx.fillText(letters[i][0], s[0], s[3]);\n      });\n    }\n  }\n\n  function reSolve() {\n    const words = getWords();\n    puzzle?.setWords(words);\n    const solutions = puzzle?.solve();\n    console.log(solutions);\n    const lineCtx = lineCanvas.current?.getContext('2d');\n    if (!solutions) return;\n    lineCtx?.clearRect(0, 0, lineCtx.canvas.width, lineCtx.canvas.height);\n    if (lineCtx) {\n      lineCtx.lineWidth = 5;\n      lineCtx.strokeStyle = '#5555FFFF';\n      solutions.forEach(s => {\n        lineCtx.beginPath();\n        lineCtx.moveTo(s.start[0], s.start[1])\n        lineCtx.lineTo(s.end[0], s.end[1])\n        lineCtx.stroke();\n      })\n    }\n  }\n\n  function rescale() {\n    // rescale canvases\n    const ctx = imgCanvas.current?.getContext('2d');\n    if (!ctx) return;\n    let xProp = ctx.canvas.width / window.outerWidth;\n    const yProp = ctx.canvas.height / window.outerHeight;\n    if (window.outerWidth > 768) {\n      xProp *= .8;\n    }\n    const big = Math.max(xProp, yProp);\n    setRescaleVal(.9 / big);\n  }\n\n  function canvasClick(e: React.MouseEvent<HTMLCanvasElement, MouseEvent>) {\n    const canvas = letterCanvas.current;\n    if (!canvas || !puzzle) return;\n    const ctx = canvas.getContext('2d');\n    if (!ctx) return;\n    const rect = canvas.getBoundingClientRect();\n    const x = (e.clientX - (rect?.left || 0)) / rescaleVal;\n    const y = (e.clientY - (rect?.top || 0)) / rescaleVal;\n    console.log(x, y)\n    const clicked = puzzle?.inBox(x, y);\n    console.log(clicked);\n    if (clicked) {\n      setChangeLetterModal({\n        ctx,\n        index: clicked.index,\n        letter: clicked.letter,\n        box: clicked.box,\n        puzzleWidth: puzzle.width\n      })\n    }\n  }\n\n  function onChangeSumbit(newLetter: string | undefined) {\n    if (!changeLetterModal) return;\n    if (newLetter) {\n      puzzle?.changeLetter(changeLetterModal.index, newLetter);\n      reSolve();\n    }\n    setChangeLetterModal(undefined);\n  }\n\n  const toDisp = (b: boolean) => b ? 'block' : 'none';\n  const toColor = (b: boolean) => b ? 'orangered' : 'white';\n\n  useEffect(() => console.log(letterOffset), [letterOffset])\n\n  return (\n    <div className='flex flex-col md:flex-row'>\n      <div className='w-screen max-w-screen grid grid-flow-row justify-center md:justify-start p-4 md:w-1/5 md:flex flex-col items-start md:pl-4'>\n        <p className=\"text-white text-left text-sm\">Choose an image of the puzzle</p>\n        <input type='file' onChange={(e) => onFileInput(e)} />\n        <p className=\"text-white text-left text-sm\">Choose an image of the words to find</p>\n        <input type='file' onChange={(e) => readWords(e)} />\n        <p className=\"text-white text-left text-sm\">Or type the words to find below, or leave it blank to search for any words</p>\n        <div className='w-2/3 mt-4 w-full max-w-xs flex'>\n          <textarea className='border-none p-1 bg-blue-50 rounded-xl flex-grow' rows={3} value={wordString} onChange={(e) => setWordString(e.target.value)} />\n          <button className='w-8 h-8 bg-blue-600 rounded-lg ml-3 self-end' onClick={reSolve}>✓</button>\n        </div>\n        {changeLetterModal && <ChangeLetterModal ctx={changeLetterModal.ctx}\n          index={changeLetterModal.index}\n          letter={changeLetterModal.letter}\n          box={changeLetterModal.box}\n          puzzleWidth={changeLetterModal.puzzleWidth}\n          close={(newLetter) => onChangeSumbit(newLetter)}\n        />}\n        <button className={`py-1 rounded-xl px-2 my-2 md:my-4 max-w-xs bg-${imgVisible ? 'blue-600' : 'gray-100'} hover:bg-blue-400 transform transition transition-color duration-300`} onClick={() => setImgVisible(!imgVisible)} >Toggle Image</button>\n        <button className={`py-1 rounded-xl px-2 my-2 md:my-4 max-w-xs bg-${boxesVisible ? 'blue-600' : 'gray-100'} hover:bg-blue-400 transform transition transition-color duration-300`} onClick={() => setBoxesVisible(!boxesVisible)} >Toggle Boxes</button>\n        <button className={`py-1 rounded-xl px-2 my-2 md:my-4 max-w-xs bg-${linesVisible ? 'blue-600' : 'gray-100'} hover:bg-blue-400 transform transition transition-color duration-300`} onClick={() => setLinesVisible(!linesVisible)} >Toggle Solutions</button>\n        <button className={`py-1 rounded-xl px-2 my-2 md:my-4 max-w-xs bg-${lettersVisible ? 'blue-600' : 'gray-100'} hover:bg-blue-400 transform transition transition-color duration-300`} onClick={() => setLettersVisible(!lettersVisible)} >Toggle Letters</button>\n        <div className='flex flex-row justify-center'>\n          <button className={`py-1 rounded-l-xl m-r-1 px-2 my-2 md:my-4 max-w-xs bg-blue-600 hover:bg-blue-400 transform transition transition-color duration-300`} onClick={() => setLetterOffset(letterOffset - 5)} >{'<'}</button>\n          <button className={`py-1 rounded-r-xl m-l-1 px-2 my-2 md:my-4 max-w-xs bg-blue-600 hover:bg-blue-400 transform transition transition-color duration-300`} onClick={() => setLetterOffset(letterOffset + 5)} >{'>'}</button>\n        </div>\n        {/* </div> */}\n      </div>\n      <div className='flex flex-grow relative justify-center' style={{}}>\n        <canvas className='absolute origin-top-center md:origin-top-left md:left-0' ref={imgCanvas} style={{ display: toDisp(imgVisible), transform: `scale(${rescaleVal})` }}></canvas>\n        <canvas className='absolute origin-top-center md:origin-top-left md:left-0' ref={boxCanvas} style={{ display: toDisp(boxesVisible), transform: `scale(${rescaleVal})` }}></canvas>\n        <canvas className='absolute origin-top-center md:origin-top-left md:left-0' ref={lineCanvas} style={{ display: toDisp(linesVisible), transform: `scale(${rescaleVal})` }}></canvas>\n        <canvas className='absolute origin-top-center md:origin-top-left md:left-0' ref={letterCanvas} onClick={e => canvasClick(e)} style={letterStyle}></canvas>\n      </div>\n    </div>\n  )\n}\n\nfunction ChangeLetterModal(props: {\n  ctx: CanvasRenderingContext2D,\n  index: number,\n  letter: string,\n  box: number[],\n  puzzleWidth: number,\n  close: (newLetter?: string) => void\n}) {\n  const [newLetter, setNewLetter] = useState<string>('');\n  function onSubmit() {\n    console.log(props.box)\n    props.ctx.beginPath();\n    props.ctx.clearRect(props.box[0], props.box[2],\n      props.box[1] - props.box[0],\n      props.box[3] - props.box[2]);\n    props.ctx.stroke();\n    const fontSize = Math.floor(.5 * props.ctx.canvas.width / props.puzzleWidth);\n    props.ctx.font = `bold ${fontSize}px Arial`;\n    props.ctx.fillStyle = '#2222FFFF';\n    props.ctx.fillText(newLetter, props.box[0], props.box[2] + (props.box[3] - props.box[2]));\n    props.close(newLetter);\n  }\n  return (\n    <div className='change-letter-modal'>\n      <div>\n        <p>Change \"{props.letter}\" to:</p>\n        <form onSubmit={onSubmit}>\n          <input autoFocus type='text' value={newLetter} onChange={e => setNewLetter(e.target.value[0]?.toUpperCase())}></input>\n          <div>\n            <button onClick={() => props.close()}>Cancel</button>\n            <button onClick={onSubmit} type='submit'>Submit</button>\n          </div>\n        </form>\n      </div>\n    </div>\n  )\n}","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { WordsearchSolver } from './components/read-and-solve';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <WordsearchSolver />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}
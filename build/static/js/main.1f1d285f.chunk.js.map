{"version":3,"sources":["logic/image-reader.ts","logic/bw-image-reader.ts","logic/solver.ts","logic/gradient.ts","logic/read-and-solve.ts","components/read-and-solve.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ImageReader","width","height","data","this","x","y","i","BWImage","averageColor","v","buff","Uint8ClampedArray","getPixel","canvas","document","createElement","context","getContext","imdata","ImageData","toClamped","putImageData","newArray","Uint8Array","set","threshhold","corners","hiContrast","Math","floor","t","fill","setPixel","l","r","b","xPlus","xMinus","yPlus","yMinus","colorImage","nPixels","bwData","sum","avg","colorData","getData","console","log","w","h","WordSearch","letters","words","confidences","boxes","tst","map","toUpperCase","m","TST","initTST","length","Error","line","Array","from","yieldLine","join","add","dx","dy","reverse","solutions","word","get","forEach","p","push","start","end","dir","a","getBoxCenter","startX","startY","dirs","undefined","box","index","letter","sb","TSTNode","childL","childR","childM","endings","info","s","newNode","addEnding","createToBottom","root","getRecurse","curr","startIndex","addRecurse","node","Gradient","stops","positions","n","c","analyzeBoxes","contexts","modelPath","cropBoxes","Float32Array","max","padX","ceil","padY","x1","y1","x2","y2","boxIndices","Int32Array","allImageData","imageTensor","tf","boxTensor","boxIndicesTensor","CROP_SIZE","resizedTensor","cropAndResize","shape","infer","img","g","stoplight","lineWidth","strokeStyle","eval","beginPath","rect","stroke","Promise","resolve","reject","model","out","predict","ds","dataSync","maxes","normalized","normalize","o","arrayMax","slice","min","arrayMin","d","modelNames","WordsearchSolver","imgCanvas","useRef","boxCanvas","letterCanvas","lineCanvas","useState","puzzle","setPuzzle","wordString","setWordString","imgVisible","setImgVisible","boxesVisible","setBoxesVisible","linesVisible","setLinesVisible","lettersVisible","setLettersVisible","rescaleVal","setRescaleVal","letterOffset","setLetterOffset","letterStyle","setLetterStyle","modelIndex","setModelIndex","changeLetterModal","setChangeLetterModal","onFileInput","e","current","target","files","f","image","Image","src","window","URL","webkitURL","createObjectURL","onload","screenWidth","outerWidth","rescale","drawImage","idt","getImageData","bw","fromColor","toFill","copy","newBlank","getAverageColor","getPixeli","fillFromi","heights","maxHeight","freqs","argmax","reduce","freq","filteredBoxes","filter","sort","newCanvas","toCanvas","querySelector","appendChild","ws","analyzeImage","getWords","then","split","splice","pop","englishwords","reSolve","setWords","solve","lineCtx","clearRect","moveTo","lineTo","ctx","xProp","yProp","outerHeight","big","useEffect","addEventListener","removeEventListener","toString","imgCtx","letterCtx","fontSize","font","fillStyle","getLetters","getBoxes","getConfidence","fillText","drawPuzzle","newLetterStyle","display","toDisp","transform","className","inter","substring","lastIndexOf","name","onClick","type","onChange","imgPath","Tesseract","recognize","res","text","catch","err","alert","readWords","rows","value","ChangeLetterModal","puzzleWidth","close","newLetter","changeLetter","onChangeSumbit","style","ref","getBoundingClientRect","clientX","left","clientY","top","clicked","inBox","canvasClick","props","setNewLetter","onSubmit","autoFocus","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.1f1d285f.chunk.js","sourcesContent":["import {BWImage} from './bw-image-reader';\n\nexport class ImageReader {\n  constructor(public width: number, public height: number, private data: ImageData) {\n    this.width = width;\n    this.height = height;\n    this.data = data;\n  }\n\n  getData() {\n    return this.data\n  }\n\n  getPixel(x: number, y: number) {\n    const i = this.width * x + y;\n    return [this.data.data[i], this.data.data[i + 1], this.data.data[i + 2], this.data.data[i + 3]]\n  }\n\n}","import { ImageReader } from \"./image-reader\";\n\ntype Corners = {l: number, r: number, t: number, b: number}\n\nexport class BWImage {\n  // mostly for internal use, usually using fromColor() or copy()\n  constructor(private data: Uint8Array, \n              public width: number, \n              public height: number, \n              private averageColor: number) {}\n\n  static fromColor(colorImage: ImageReader) {\n    const nPixels = colorImage.width * colorImage.height;\n    const bwData = new Uint8Array(nPixels);\n    let sum = 0;\n    let avg = 0;\n    const colorData: Uint8ClampedArray = colorImage.getData().data;\n    for (let i = 0; i < nPixels; i++) {\n      avg = Math.floor((colorData[4 * i] + colorData[4 * i + 1] + colorData[4 * i + 2]) / 3);\n      sum += avg;\n      bwData[i] = avg;\n    }\n    console.log(sum, nPixels)\n    return new BWImage(bwData, colorImage.width, colorImage.height, Math.floor(sum / nPixels))\n  }\n\n  static newBlank(w: number, h: number) {\n    return new BWImage(new Uint8Array(w * h).fill(255), w, h, 255);\n  }\n\n  getData() {\n    return this.data;\n  }\n\n  getAverageColor() {\n    return this.averageColor;\n  }\n\n  getPixeli(i: number) {\n    return this.data[i]\n  }\n\n  getPixel(x: number, y: number) {\n    return this.data[x + this.width * y]\n  }\n\n  setPixel(x: number, y: number, v: number) {\n    this.data[x + this.width * y] = v;\n  }\n\n  toClamped() {\n    const buff = new Uint8ClampedArray(this.width * this.height * 4);\n    for (var x = 0; x < this.width; x++) {\n      for (var y = 0; y < this.height; y++) {\n        buff[4 * (y * this.width + x)] = this.getPixel(x, y)\n        buff[1 + 4 * (y * this.width + x)] = this.getPixel(x, y)\n        buff[2 + 4 * (y * this.width + x)] = this.getPixel(x, y)\n        buff[3 + 4 * (y * this.width + x)] = 255\n      }\n    }\n    return buff;\n  }\n\n  toCanvas(): HTMLCanvasElement {\n    const canvas = document.createElement('canvas');\n    const context = canvas.getContext('2d');\n    const imdata = new ImageData(this.toClamped(), this.width);\n    context?.putImageData(imdata, 0, 0);\n    return canvas;\n  }\n\n  copy() {\n    const newArray = new Uint8Array(this.width * this.height);\n    newArray.set(this.data);\n    return new BWImage(\n      newArray,\n      this.width,\n      this.height,\n      this.averageColor)\n  }\n\n  fillFromi(i: number, threshhold: number, corners: Corners, hiContrast: BWImage) {\n    const x = Math.floor(i % this.width);\n    const y = Math.floor(i / this.width);\n    const t = hiContrast;\n    this.fill(x, y, threshhold, corners, t)\n  }\n\n  fill(x: number, y: number, threshhold: number, corners: Corners, hiContrast: BWImage) {\n    if (this.getPixel(x, y) < threshhold) {\n      this.setPixel(x, y, 255);\n      hiContrast.setPixel(x, y, 0);\n      if (x < corners.l) corners.l = x;\n      if (x > corners.r) corners.r = x;\n      if (y < corners.t) corners.t = y;\n      if (y > corners.b) corners.b = y;\n\n      const xPlus = (x > 0)\n      const xMinus = (x < this.width - 1)\n      const yPlus = (y > 0)\n      const yMinus = (y < this.height - 1)\n\n      // Can definitely optimize checks\n      if (xMinus) this.fill(x - 1, y, threshhold, corners, hiContrast);\n      if (xPlus) this.fill(x + 1, y, threshhold, corners, hiContrast);\n      if (yMinus) this.fill(x, y - 1, threshhold, corners, hiContrast);\n      if (yPlus) this.fill(x, y + 1, threshhold, corners, hiContrast);\n\n      if (xMinus && yMinus) this.fill(x - 1, y - 1, threshhold, corners, hiContrast);\n      if (xMinus && yPlus) this.fill(x - 1, y + 1, threshhold, corners, hiContrast);\n      if (xPlus && yMinus) this.fill(x + 1, y - 1, threshhold, corners, hiContrast);\n      if (xPlus && yPlus) this.fill(x + 1, y + 1, threshhold, corners, hiContrast);\n    }\n  }\n\n}","type Solution = { word: string, start: [number, number], end: [number, number] }\n\nexport class WordSearch {\n  private letters: string[];\n  private tst: TST;\n  private words: string[];\n  constructor(\n    letters: string[],\n    public width: number,\n    public height: number,\n    words: string[],\n    private confidences: number[],\n    private boxes: number[][]) {\n    this.letters = letters.map((l) => l.toUpperCase())\n    this.words = ['as'].map(m => m.toUpperCase()) || []\n    this.words = words.map(m => m.toUpperCase()) || [];\n    this.tst = new TST();\n    this.initTST();\n    if (this.letters.length !== this.boxes.length) {\n      throw new Error('Length mismatch between boxes and letters.');\n    }\n  }\n  \n  initTST() {\n    this.tst = new TST();\n    // horizontal\n    for (let y = 0; y < this.height; y++) {\n      const line = Array.from(this.yieldLine(0, y, [1, 0])).join(\"\");\n      for (let i = 0; i < line.length; i++) {\n        this.tst.add(line, {x: i, y: y, dx: 1, dy: 0}, i);\n      }\n      const reverse = Array.from(\n        this.yieldLine(this.width - 1, y, [-1, 0])\n      ).join(\"\");\n      for (let i = 0; i < reverse.length; i++) {\n        this.tst.add(reverse, {x: this.width - i - 1, y: y, dx: -1, dy: 0}, i);\n      }\n    }\n    // vertical\n    for (let x = 0; x < this.width; x++) {\n      const line = Array.from(this.yieldLine(x, 0, [0, 1])).join(\"\");\n      for (let i = 0; i < line.length; i++) {\n        this.tst.add(line, {x: x, y: i, dx: 0, dy: 1}, i);\n      }\n      console.log(line)\n      const reverse = Array.from(\n        this.yieldLine(x, this.height - 1, [0, -1])\n      ).join(\"\");\n      console.log(reverse);\n      for (let i = 0; i < reverse.length; i++) {\n        this.tst.add(reverse, {x: x, y: this.height - i - 1, dx: 0, dy: -1}, i);\n      }\n    }\n    // diagonal down right\n    for (let y = this.height - 1; y >= 0; y--) {\n      const line = Array.from(this.yieldLine(0, y, [1, 1])).join(\"\");\n      for (let i = 0; i < line.length; i++) {\n        this.tst.add(line, {x: 0, y: y, dx: 1, dy: 1}, i);\n      }\n    }\n    for (let x = 1; x < this.width; x++) {\n      const line = Array.from(this.yieldLine(x, 0, [1, 1])).join(\"\");\n      for (let i = 0; i < line.length; i++) {\n        this.tst.add(line, {x: x, y: 0, dx: 1, dy: 1}, i);\n      }\n    }\n\t\t// diagonal up left\n    for (let x = 0; x < this.width; x++) {\n      const line = Array.from(this.yieldLine(x, this.height - 1, [-1, -1])).join(\"\");\n      for (let i = 0; i < line.length; i++) {\n        this.tst.add(line, {x: x, y: this.height - 1, dx: -1, dy: -1}, i);\n      }\n    }\n\t\tfor (let y = this.height - 1; y >= 0; y--) {\n      const line = Array.from(this.yieldLine(this.width - 1, y, [-1, -1])).join(\"\");\n      for (let i = 0; i < line.length; i++) {\n        this.tst.add(line, {x: this.width - 1, y: y, dx: -1, dy: -1}, i);\n      }\n    }\n\t\t// diagonal down left\n    for (let x = 0; x < this.width; x++) {\n      const line = Array.from(this.yieldLine(x, 0, [-1, 1])).join(\"\");\n      for (let i = 0; i < line.length; i++) {\n        this.tst.add(line, {x: x, y: 0, dx: -1, dy: 1}, i);\n      }\n    }\n\t\tfor (let y = 1; y < this.height; y++) {\n      const line = Array.from(this.yieldLine(this.width - 1, y, [-1, 1])).join(\"\");\n      for (let i = 0; i < line.length; i++) {\n        this.tst.add(line, {x: this.width - 1, y: y, dx: -1, dy: 1}, i);\n      }\n    }\n\t\t// diagonal up right\n    for (let x = this.width - 1; x >= 0; x--) {\n      const line = Array.from(this.yieldLine(x, this.height - 1, [1, -1])).join(\"\");\n      for (let i = 0; i < line.length; i++) {\n        this.tst.add(line, {x: x, y: this.height - 1, dx: 1, dy: -1}, i);\n      }\n    }\n\t\tfor (let y = this.height - 2; y >= 0; y--) {\n      const line = Array.from(this.yieldLine(0, y, [1, -1])).join(\"\");\n      for (let i = 0; i < line.length; i++) {\n        this.tst.add(line, {x: 0, y: y, dx: 1, dy: -1}, i);\n      }\n    }\n  }\n\n  public solve(): Solution[] {\n    // const answerMap = new Map<string, PositionInfo[]>();\n    console.log(this.letters)\n    const solutions: {word: string, start: [number, number], end: [number, number], dir: [number, number]}[] = [];\n    for (let word of this.words) {\n      // answerMap.set(word, this.tst.get(word));\n      const pos = this.tst.get(word);\n      pos.forEach(p => {\n        solutions.push({\n          word: word,\n          start: [p.x, p.y],\n          end: [p.x + (word.length - 1) * p.dx, p.y + (word.length - 1) * p.dy],\n          dir: [p.dx, p.dy]\n        })\n      })\n    }\n    console.log(solutions);\n    const withBoxes: Solution[] = solutions.map(a => ({...a, start: this.getBoxCenter(...a.start), end: this.getBoxCenter(...a.end)}))\n    return withBoxes;\n  }\n\n  private *yieldLine(startX: number, startY: number, dirs: [number, number]) {\n    let x = startX,\n      y = startY;\n    while (x >= 0 && x < this.width && y >= 0 && y < this.height) {\n      yield this.letters[x + this.width * y];\n      x += dirs[0];\n      y += dirs[1];\n    }\n  }\n\n  getLetter(x: number, y: number) {\n    return this.letters[this.width * y + x];\n  }\n\n  setWords(words: string[]) {\n    this.words = words.map(w => w.toUpperCase());\n  }\n\n  changeLetter(i: number, l: string) {\n    this.letters[i] = l.toUpperCase();\n    this.initTST();\n  }\n\n  getBoxCenter(x: number, y: number): [number, number] {\n    const b = this.boxes[this.width * y + x]\n    console.log(x,y)\n    return [b[0] + (b[1] - b[0]) / 2, b[2] + (b[3] - b[2]) / 2];\n  }\n\n  getConfidence(i: number) {\n    return this.confidences[i] || 0;\n  }\n\n  // tells whether the given coordinate is inside a box,\n  // returns the index of the box and the letter \n  // undefined if the coordinate is not in a box\n  inBox(x: number, y: number): {index: number, letter: string, box: number[]} | undefined {\n    let r: {index: number, letter: string, box: number[]} | undefined = undefined;\n    this.boxes.forEach((box, i) => {\n      if ((box[0] < x) && (x < box[1]) && (box[2] < y) && (y < box[3])) {\n        r = {index: i, letter: this.letters[i], box};\n      }\n    });\n    return r;\n  }\n\n  getBoxes() {\n    return this.boxes;\n  }\n\n  getLetters() {\n    return this.letters;\n  }\n\n  getWords() {\n    return this.words;\n  }\n\n  toString() {\n    let sb = '';\n    this.letters.forEach((l, i) => {\n      if (i !== 0 && i % this.width === 0) {\n        sb += '\\n'\n      }\n      sb += l + ' '\n    })\n    return sb;\n  }\n\n  // solve() {\n  //   const solutions: Solution[] = [];\n  //   let s;\n  //   let x, y;\n  //   this.letters.forEach((l, i) => {\n  //     this.words.forEach(w => {\n  //       x = i % this.width;\n  //       y = Math.floor(i / this.width)\n  //       s = this.checkWord(w, l, x, y)\n  //       if (s) {\n  //         solutions.push({\n  //           word: w,\n  //           start: this.getBoxCenter(x, y),\n  //           end: this.getBoxCenter(s[0], s[1])\n  //         })\n  //       }\n\n  //     })\n  //   })\n  //   return solutions;\n  // }\n\n  // checkWord(word: string, letter1: string, x: number, y: number): [number, number] | null {\n  //   if (letter1 != word[0])\n  //     return null\n  //   let ret: [number, number] | null = null;\n  //   ret = ret || this.checkLetter(word, 1, x, y, [-1, -1]);\n  //   ret = ret || this.checkLetter(word, 1, x, y, [-1, 0]);\n  //   ret = ret || this.checkLetter(word, 1, x, y, [-1, 1]);\n  //   ret = ret || this.checkLetter(word, 1, x, y, [0, -1]);\n  //   ret = ret || this.checkLetter(word, 1, x, y, [0, 1]);\n  //   ret = ret || this.checkLetter(word, 1, x, y, [1, -1]);\n  //   ret = ret || this.checkLetter(word, 1, x, y, [1, 0]);\n  //   ret = ret || this.checkLetter(word, 1, x, y, [1, 1]);\n  //   return ret;\n  // }\n\n\n  // checkLetter(word: string, index: number, x: number, y: number, vector: [number, number]): [number, number] | null {\n  //   const nx = x + vector[0];\n  //   const ny = y + vector[1];\n  //   if (index >= word.length) {\n\n  //     return [x, y];\n  //   }\n  //   if (nx < 0 || nx >= this.width || ny < 0 || ny >= this.height) {\n  //     return null;\n  //   }\n  //   if (this.getLetter(nx, ny) == word[index]) {\n  //     return this.checkLetter(word, index + 1, nx, ny, vector);\n  //   }\n  //   else {\n  //     return null;\n  //   }\n  // }\n}\n\ntype PositionInfo = {\n  x: number,\n  y: number,\n  dx: number,\n  dy: number,\n}\n\nclass TSTNode {\n  public childL: TSTNode | null = null;\n  public childR: TSTNode | null = null;\n  public childM: TSTNode | null = null;\n  public endings: PositionInfo[] = [];\n  constructor(public letter: string) {}\n\n  public addEnding(info: PositionInfo) {\n    this.endings.push(info);\n  }\n\n  public static createToBottom(\n    s: string,\n    index: number,\n    info: PositionInfo\n  ) {\n    const newNode = new TSTNode(s[index]);\n    if (index === s.length - 1) {\n      newNode.addEnding(info);\n      return newNode;\n    }\n    newNode.childM = this.createToBottom(s, index + 1, info);\n    newNode.addEnding(info);\n    return newNode;\n  }\n}\n\nexport class TST {\n  private root: TSTNode | null = null;\n\n  public get(s: string): PositionInfo[] {\n    if (!this.root) return [];\n    return this.getRecurse(s, 0, this.root);\n  }\n\n  private getRecurse(\n    s: string,\n    index: number,\n    curr: TSTNode\n  ): PositionInfo[] {\n    if (curr.letter === s[index]) {\n      if (index === s.length - 1) return curr.endings;\n      if (curr.childM) return this.getRecurse(s, index + 1, curr.childM);\n      else return [];\n    } else if (s[index] > curr.letter) {\n      if (curr.childR) return this.getRecurse(s, index, curr.childR);\n      else return [];\n    } else {\n      if (curr.childL) return this.getRecurse(s, index, curr.childL);\n      else return [];\n    }\n  }\n\n  public add(s: string, info: PositionInfo, startIndex?: number) {\n    if (!this.root)\n      this.root = TSTNode.createToBottom(s, startIndex || 0, info);\n    this.addRecurse(this.root, s, startIndex || 0, info);\n  }\n\n  private addRecurse(\n    node: TSTNode,\n    s: string,\n    index: number,\n    info: PositionInfo\n  ) {\n    if (s[index] === node.letter) {\n      node.addEnding(info);\n      if (index === s.length - 1) {\n        return;\n      }\n      this.addRecurse(\n        node.childM ||\n          (node.childM = TSTNode.createToBottom(s, index + 1, info)),\n        s,\n        index + 1,\n        info\n      );\n    } else if (s[index] > node.letter) {\n      if (node.childR) {\n        this.addRecurse(node.childR, s, index, info);\n      } else {\n        node.childR = TSTNode.createToBottom(s, index, info);\n      }\n    } else {\n      if (node.childL) {\n        this.addRecurse(node.childL, s, index, info);\n      } else {\n        node.childL = TSTNode.createToBottom(s, index, info);\n      }\n    }\n  }\n}\n\nexport class WordSearchNew {\n  private tst: TST;\n  private width: number;\n  private height: number;\n  constructor(private letters: string[], private words: string[]) {\n    this.width = this.letters[0].length;\n    this.height = this.letters.length;\n    this.tst = new TST();\n    this.initTST();\n  }\n\n  initTST() {\n    this.tst = new TST();\n    // horizontal\n    for (let y = 0; y < this.height; y++) {\n      const line = Array.from(this.yieldLine(0, y, [1, 0])).join(\"\");\n      for (let i = 0; i < line.length; i++) {\n        this.tst.add(line, {x: i, y: y, dx: 1, dy: 0}, i);\n      }\n      const reverse = Array.from(\n        this.yieldLine(this.width - 1, y, [-1, 0])\n      ).join(\"\");\n      for (let i = 0; i < reverse.length; i++) {\n        this.tst.add(reverse, {x: this.width - i - 1, y: y, dx: -1, dy: 0}, i);\n      }\n    }\n    // vertical\n    for (let x = 0; x < this.width; x++) {\n      const line = Array.from(this.yieldLine(x, 0, [0, 1])).join(\"\");\n      for (let i = 0; i < line.length; i++) {\n        this.tst.add(line, {x: x, y: i, dx: 0, dy: 1}, i);\n      }\n      const reverse = Array.from(\n        this.yieldLine(x, this.height - 1, [-1, 0])\n      ).join(\"\");\n      for (let i = 0; i < reverse.length; i++) {\n        this.tst.add(reverse, {x: x, y: this.height - i - 1, dx: -1, dy: 0}, i);\n      }\n    }\n    // diagonal down right\n    for (let y = this.height - 1; y >= 0; y--) {\n      const line = Array.from(this.yieldLine(0, y, [1, 1])).join(\"\");\n      for (let i = 0; i < line.length; i++) {\n        this.tst.add(line, {x: 0, y: y, dx: 1, dy: 1}, i);\n      }\n    }\n    for (let x = 1; x < this.width; x++) {\n      const line = Array.from(this.yieldLine(x, 0, [1, 1])).join(\"\");\n      for (let i = 0; i < line.length; i++) {\n        this.tst.add(line, {x: x, y: 0, dx: 1, dy: 1}, i);\n      }\n    }\n\t\t// diagonal up left\n    for (let x = 0; x < this.width; x++) {\n      const line = Array.from(this.yieldLine(x, this.height - 1, [-1, -1])).join(\"\");\n      for (let i = 0; i < line.length; i++) {\n        this.tst.add(line, {x: x, y: this.height - 1, dx: -1, dy: -1}, i);\n      }\n    }\n\t\tfor (let y = this.height - 1; y >= 0; y--) {\n      const line = Array.from(this.yieldLine(this.width - 1, y, [-1, -1])).join(\"\");\n      for (let i = 0; i < line.length; i++) {\n        this.tst.add(line, {x: this.width - 1, y: y, dx: -1, dy: -1}, i);\n      }\n    }\n\t\t// diagonal down left\n    for (let x = 0; x < this.width; x++) {\n      const line = Array.from(this.yieldLine(x, 0, [-1, 1])).join(\"\");\n      for (let i = 0; i < line.length; i++) {\n        this.tst.add(line, {x: x, y: 0, dx: -1, dy: 1}, i);\n      }\n    }\n\t\tfor (let y = 1; y < this.height; y++) {\n      const line = Array.from(this.yieldLine(this.width - 1, y, [-1, 1])).join(\"\");\n      for (let i = 0; i < line.length; i++) {\n        this.tst.add(line, {x: this.width - 1, y: y, dx: -1, dy: 1}, i);\n      }\n    }\n\t\t// diagonal up right\n    for (let x = this.width - 1; x >= 0; x--) {\n      const line = Array.from(this.yieldLine(x, this.height - 1, [1, -1])).join(\"\");\n      for (let i = 0; i < line.length; i++) {\n        this.tst.add(line, {x: x, y: this.height - 1, dx: 1, dy: -1}, i);\n      }\n    }\n\t\tfor (let y = this.height - 2; y >= 0; y--) {\n      const line = Array.from(this.yieldLine(0, y, [1, -1])).join(\"\");\n      for (let i = 0; i < line.length; i++) {\n        this.tst.add(line, {x: 0, y: y, dx: 1, dy: -1}, i);\n      }\n    }\n  }\n\n  private *yieldLine(startX: number, startY: number, dirs: [number, number]) {\n    let x = startX,\n      y = startY;\n    while (x >= 0 && x < this.width && y >= 0 && y < this.height) {\n      yield this.letters[y][x];\n      x += dirs[0];\n      y += dirs[1];\n    }\n  }\n\n  public solve() {\n    const answerMap = new Map<string, PositionInfo[]>();\n    for (let word of this.words) {\n      answerMap.set(word, this.tst.get(word));\n    }\n    return answerMap;\n  }\n}\nconst test = \n`T I I S I R F R O S T M R E O U I F E L\nE D I L C E I L N A O F A S E O R Y H T\nS E E T E R S O C H R I S T M A S F A S\nA H B D O H W E O Y E T R H C E S I A O\nA E H H T S R C A H N R E S A A N H T I\nD D E R T P O Y E S S D S T E C S P K S\nO O E O H W D H A L T W N H C T E G R O\nI A R R E N I R L N E S E S N E T T I M\nI M V E I A E E T F W S I E D M C T P R\nL H T W H S B I L R S L E S O A A E D O\nB R S U I H T S L E D C E A C O L D A R\nR L T H G O E C A E L D N A C S A H H H\nE R A I C V I N O Z B O O T S A L H C O\nS B E N S E D E C E M B E R R O E B H P\nO L F T K L L E O L P E K A L F W O N S\nS L D R A E N I A D R A Z Z I L B T A H\nE I O L H E T T N N A T I S I M E N E U\nU H P S N O W P H T I R N A M W O N S S\nF C N O S A E S B P T A O G B D L R T R\nE C A L P E R I F G N R B N C E S E N O`;\n","export class Gradient {\n  constructor(private stops: [number, number, number][], \n              private positions: number[]) {}\n\n  eval(n: number) {\n    let index = 0;\n    if (n == 0) {\n      return this.stops[0]\n    }\n    while (n > this.positions[index]) \n      index++\n    const r = (n - this.positions[index - 1]) / (this.positions[index] - this.positions[index - 1])\n    return (this.stops[index - 1].map((c,i) => c + (this.stops[index][i] - c) * r));\n  }\n\n  static stoplight() {\n    return new Gradient([[255, 127, 127], [255, 0, 0], [0, 255, 0]], [0, .5, 1]);\n  }\n}","import { BWImage } from \"./bw-image-reader\";\nimport { ImageReader } from \"./image-reader\";\nimport * as tf from '@tensorflow/tfjs';\nimport { WordSearch } from \"./solver\";\nimport { Gradient } from \"./gradient\";\nimport { Contexts } from \"../components/read-and-solve\";\n\nconst alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\ntype Inference = [string, number][];\n\nexport function analyzeImage(img: ImageReader, words: string[], contexts: Contexts, modelPath?: string) {\n  console.log('analyzeImage');\n  return new Promise<WordSearch>(async (resolve, reject) => {\n    const bw = BWImage.fromColor(img);\n    const toFill = bw.copy();\n    const hiContrast = BWImage.newBlank(bw.width, bw.height);\n\n    const nPixels = bw.width * bw.height;\n    const threshhold = toFill.getAverageColor() - 25;\n    const corners = { l: toFill.width, r: 0, t: toFill.height, b: 0 }\n    const boxes = [];\n    for (let i = 0; i < nPixels; i++) {\n      if (toFill.getPixeli(i) < threshhold) {\n        corners.l = toFill.width;\n        corners.r = 0;\n        corners.t = toFill.height;\n        corners.b = 0;\n        toFill.fillFromi(i, threshhold, corners, hiContrast)\n        boxes.push([corners.l, corners.r, corners.t, corners.b])\n      }\n    }\n\n    // const maxHeight = boxes.reduce((max, i) => Math.max(max, i[3] - i[2]), 0);\n    // const filteredBoxes = boxes.filter((b) => b[3] - b[2] > maxHeight * 0.5);\n\n    const heightThreshold = 8;\n    const heights = boxes.map(box => box[3] - box[2]);\n    const maxHeight = Math.max(...heights);\n    const freqs = new Array(maxHeight + 1).fill(0);\n    heights.forEach(h => freqs[h]++);\n    console.log({freqs})\n    const argmax: [number, number] = freqs.reduce((maxes, freq, i) => freq > maxes[0] ? [freq, i] : maxes, [heights[0], 0]);\n    // choose boxes within heightThreshold of argmax height\n    const filteredBoxes = boxes.filter(b => argmax[1] - heightThreshold < b[3] - b[2] && b[3] - b[2] <= argmax[1] + heightThreshold);\n    console.log({maxHeight})\n    console.log({heights})\n    console.log({argmax})\n    console.log({filteredBoxes})\n    filteredBoxes.sort((a, b) => a[2] - b[2] > argmax[1] ? 1 : a[0] - b[0]);\n    console.log({filteredBoxes})\n    const newCanvas = hiContrast.toCanvas();\n    document.querySelector('.target')?.appendChild(newCanvas);\n    const ws = await analyzeBoxes(hiContrast, filteredBoxes, words, contexts, modelPath);\n    resolve(ws);\n  })\n}\n\nasync function analyzeBoxes(hiContrast: BWImage, boxes: number[][], words: string[], contexts: Contexts, modelPath?: string) {\n  console.log('analyzeBoxes')\n  const cropBoxes = new Float32Array(boxes.length * 4);\n  const EXTRA_PAD = 5;\n  const w = hiContrast.width - 1;\n  const h = hiContrast.height - 1;\n  boxes.forEach((b, i) => {\n    const dx = b[1] - b[0]\n    const dy = b[3] - b[2]\n    const max = Math.max(dx, dy);\n    const padX = Math.ceil((max - dx) / 2) + EXTRA_PAD;\n    const padY = Math.ceil((max - dy) / 2) + EXTRA_PAD;\n    const x1 = b[0] - padX;\n    const y1 = b[2] - padY;\n    const x2 = b[1] + padX;\n    const y2 = b[3] + padY;\n    cropBoxes[i * 4] = y1 / h;\n    cropBoxes[i * 4 + 1] = x1 / w;\n    cropBoxes[i * 4 + 2] = y2 / h;\n    cropBoxes[i * 4 + 3] = x2 / w;\n  })\n\n  const boxIndices = new Int32Array(boxes.length).fill(0);\n\n  const allImageData = hiContrast.getData();\n\n  // move arrays into tensors to crop the image into letters \n  const imageTensor: tf.Tensor<tf.Rank.R4> = tf.tensor(allImageData, [1, hiContrast.height, hiContrast.width, 1]);\n  const boxTensor: tf.Tensor<tf.Rank.R2> = tf.tensor(cropBoxes, [boxes.length, 4]);\n  const boxIndicesTensor: tf.Tensor<tf.Rank.R1> = tf.tensor(boxIndices, [boxes.length]);\n  const CROP_SIZE: [number, number] = [28, 28]\n  \n  console.log(1, hiContrast.height, hiContrast.width, 1);\n  console.log(boxes.length, 4);\n  console.log(boxes.length);\n\n  // separate images of each letter and send them to tf model\n  const resizedTensor = tf.image.cropAndResize(imageTensor, boxTensor, boxIndicesTensor, CROP_SIZE);\n  console.log(resizedTensor.shape);\n  const letters = await infer(resizedTensor, modelPath);\n\n  // put boxes on box canvas\n  contexts.box.canvas.width = contexts.img.canvas.width;\n  contexts.box.canvas.height = contexts.img.canvas.height;\n  const g = Gradient.stoplight();\n  contexts.box.lineWidth = 5;\n  boxes.forEach((b, i) => {\n    contexts.box.strokeStyle = `rgb(${g.eval(letters[i][1]).join(',')})`;\n    contexts.box.beginPath();\n    contexts.box.rect(b[0] - 3, b[2] - 3, b[1] - b[0] + 3, b[3] - b[2] + 3)\n    contexts.box.stroke();\n  });\n\n  // find width and height of puzzle\n  console.log(boxes);\n  let width = 0;\n  while (boxes[width][0] < boxes[width + 1][0]) width++;\n  width++;\n  const height = boxes.length / width;\n  const confidences = letters.map(l => l[1]);\n  console.log(width, height);\n\n  return new WordSearch(letters.map(l => l[0]), width, height, words, confidences, boxes);\n\n  // contexts.line.canvas.width = contexts.img.canvas.width;\n  // contexts.line.canvas.height = contexts.img.canvas.height;\n  // contexts.line.lineWidth = 5;\n  // contexts.line.strokeStyle = '#5555FFFF';\n  // solutions.forEach(s => {\n  //   const start = boxes[s.start[0] + s.start[1] * width];\n  //   const end = boxes[s.end[0] + s.end[1] * width];\n  //   contexts.line.beginPath();\n  //   contexts.line.moveTo(start[0] + (start[1] - start[0]) / 2, start[2] + (start[3] - start[2]) / 2)\n  //   contexts.line.lineTo(end[0] + (end[1] - end[0]) / 2, end[2] + (end[3] - end[2]) / 2)\n  //   contexts.line.stroke();\n  // })\n\n  // contexts.letter.canvas.width = contexts.img.canvas.width;\n  // contexts.letter.canvas.height = contexts.img.canvas.height;\n  // contexts.letter.font = \"bold 30px Arial\";\n  // contexts.letter.fillStyle = '#FF0077FF';\n  // boxes.forEach((s, i) => {\n  //   contexts.letter.fillText(letters[i][0], s[0], s[3]);\n  // })\n}\n\nfunction infer(t: tf.Tensor<tf.Rank.R4>, modelPath?: string) {\n  console.log('Inferring with ', modelPath)\n  return new Promise<Inference>(async (resolve, reject) => {\n    const model = await tf.loadGraphModel(modelPath || './models/bw_no_rotate/model.json');\n    const out = model.predict(t) as tf.Tensor<tf.Rank>;\n    console.log(out.shape);\n    const ds = out.dataSync();\n    const maxes = Array.from(tf.argMax(out, 1).dataSync());\n    // scale output values linearly between 0 and 1\n    const normalized = normalize(ds, 0, 1);\n    resolve (maxes.map((o, i) => [alphabet[o], arrayMax(normalized.slice(26 * i, 26 * (i + 1)))]))\n  })\n}\n\n\n\n// function showFromTensor(tensor, imageNumber, canvasNum) {\n//   const shape = tensor.shape;\n//   const data = tensor.dataSync();\n//   const imSize = shape[1] * shape[2] * shape[3];\n//   const canvasSize = shape[1] * shape[2] * 4;\n//   const pixels = new Uint8Array(canvasSize)\n//   let c = 0;\n//   for (let i = 0; i < imSize; i++) {\n//     pixels[c++] = data[i + imageNumber * imSize];\n//     pixels[c++] = data[i + imageNumber * imSize];\n//     pixels[c++] = data[i + imageNumber * imSize];\n//     pixels[c++] = 255;\n//   }\n//   const canvas2 = document.getElementById('canvas' + canvasNum);\n//   const ctx = canvas2.getContext('2d');\n//   canvas2.width = shape[2];\n//   canvas2.height = shape[1];\n\n//   const idata = ctx.createImageData(shape[2], shape[1]);\n//   idata.data.set(pixels);\n\n//   ctx.putImageData(idata, 0, 0);\n// }\n\nfunction normalize(data: Float32Array | Int32Array | Uint8Array | number[], a: number, b: number) {\n  console.log(data)\n  const max = arrayMax(data)\n  const min = arrayMin(data)\n  console.log(max, min)\n  return data.map(d => ((d - min) / (max - min)) * (b - a) + a)\n}\n\n\nfunction arrayMax(a: Float32Array | Int32Array | Uint8Array | number[]) {\n  let m = a[0];\n  for (let i = 1; i < a.length; i++) {\n    if (a[i] > m)\n      m = a[i]\n  }\n  return m;\n}\n\nfunction arrayMin(a: Float32Array | Int32Array | Uint8Array | number[]) {\n  let m = a[0];\n  for (let i = 1; i < a.length; i++) {\n    if (a[i] < m)\n      m = a[i]\n  }\n  return m;\n}","import React, { useEffect, useRef, useState } from \"react\";\nimport { ImageReader } from \"../logic/image-reader\";\nimport { analyzeImage } from \"../logic/read-and-solve\";\nimport englishwords from \"../logic/usa2.json\";\nimport '../App.css';\nimport { WordSearch } from \"../logic/solver\";\nimport Tesseract from \"tesseract.js\";\nimport { Gradient } from \"../logic/gradient\";\nexport type Contexts = {\n  img: CanvasRenderingContext2D,\n  box: CanvasRenderingContext2D,\n  letter: CanvasRenderingContext2D,\n  line: CanvasRenderingContext2D\n}\n\nexport type ImageLetter = {\n  l: number, r: number, t: number, b: number,\n  letter: string,\n\n}\n\nconst modelNames = ['./models/bw_no_rotate/model.json', './models/artificial/model.json']\n\nexport function WordsearchSolver() {\n  const imgCanvas = useRef<HTMLCanvasElement>(null);\n  const boxCanvas = useRef<HTMLCanvasElement>(null);\n  const letterCanvas = useRef<HTMLCanvasElement>(null);\n  const lineCanvas = useRef<HTMLCanvasElement>(null);\n  const [puzzle, setPuzzle] = useState<WordSearch>();\n  const [wordString, setWordString] = useState<string>('');\n  const [imgVisible, setImgVisible] = useState<boolean>(true);\n  const [boxesVisible, setBoxesVisible] = useState<boolean>(false);\n  const [linesVisible, setLinesVisible] = useState<boolean>(true);\n  const [lettersVisible, setLettersVisible] = useState<boolean>(false);\n  const [rescaleVal, setRescaleVal] = useState<number>(1);\n  const [letterOffset, setLetterOffset] = useState<number>(0);\n  const [letterStyle, setLetterStyle] = useState<any>();\n  const [modelIndex, setModelIndex] = useState<number>(0);\n  const [changeLetterModal, setChangeLetterModal] = useState<{\n    ctx: CanvasRenderingContext2D,\n    index: number,\n    letter: string,\n    box: number[],\n    puzzleWidth: number\n  } | undefined>();\n\n  useEffect(() => {\n    window.addEventListener('resize', rescale);\n    return (() => window.removeEventListener('resize', rescale))\n  }, [])\n\n  useEffect(() => {\n    drawPuzzle();\n  }, [puzzle])\n\n  function test() {\n    return `scale(${rescaleVal}) translateX(${letterOffset}px)`\n  }\n\n  useEffect(() => {\n    const newLetterStyle = {\n      display: toDisp(lettersVisible),\n      transform: test()\n    };\n    setLetterStyle(newLetterStyle)\n  }, [lettersVisible, rescaleVal, letterOffset])\n\n  function readWords(e: React.ChangeEvent<HTMLInputElement>) {\n    if (e.target.files?.length && e.target.files.length > 0) {\n      const imgPath: string = URL.createObjectURL(e.target.files[0]);\n      console.log('REcognizing')\n      console.log(imgPath)\n      Tesseract.recognize(imgPath, 'eng')\n        .then(res => {\n          console.log(res);\n          setWordString(res.data.text);\n        })\n        .catch(err => console.log(err));\n    } else {\n      alert('Invalid file');\n    }\n  }\n\n  function onFileInput(e: React.ChangeEvent<HTMLInputElement>) {\n    const img = imgCanvas.current?.getContext('2d');\n    const box = boxCanvas.current?.getContext('2d');\n    const letter = letterCanvas.current?.getContext('2d');\n    const line = lineCanvas.current?.getContext('2d');\n    if (!(img && box && letter && line)) return;\n    const contexts: Contexts = { img, box, letter, line };\n    if (e.target.files?.length && e.target.files.length > 0) {\n      const f: File = e.target.files[0];\n      const image = new Image();\n      const url = window.URL || window.webkitURL,\n        src = url.createObjectURL(f);\n      image.src = src;\n      image.onload = () => {\n        const screenWidth = window.outerWidth;\n        const w = Math.min(screenWidth, 400);\n        const h = (w / image.width) * image.height;\n        img.canvas.width = image.width;\n        img.canvas.height = image.height;\n        rescale();\n\n        img.drawImage(image, 0, 0, image.width, image.height)\n        console.log(\"Image size: \", image.width, 'x', image.height)\n        const idt = img.getImageData(0, 0, image.width, image.height)\n        console.log(idt)\n        const imgRead = new ImageReader(image.width, image.height, idt)\n        // set loading true\n        analyzeImage(imgRead, getWords(), contexts, modelNames[modelIndex])\n          .then((ws) => {\n            setPuzzle(ws);\n          });\n      }\n    }\n  }\n\n  function getWords() {\n    const words = wordString.split(/[^a-zA-Z0-9]+/);\n    if (words[0] === '') words.splice(0, 1);\n    if (words[words.length - 1] === '') words.pop();\n    if (words.length > 0) {\n      console.log(words);\n      return words;\n    }\n    return englishwords.filter(w => w.length > 3);\n  }\n\n  function drawPuzzle() {\n    if (!puzzle) return;\n    const solutions = puzzle.solve();\n    console.log(solutions);\n    console.log(\"Found\", solutions.length, \"words out of\", puzzle.getWords().length)\n    console.log(puzzle.toString())\n\n    const imgCtx = imgCanvas.current?.getContext('2d');\n    if (!imgCtx) return;\n\n    const lineCtx = lineCanvas.current?.getContext('2d');\n    if (lineCtx) {\n      lineCtx.canvas.width = imgCtx.canvas.width;\n      lineCtx.canvas.height = imgCtx.canvas.height;\n      lineCtx.lineWidth = 5;\n      lineCtx.strokeStyle = '#5555FFFF';\n      solutions.forEach(s => {\n        lineCtx.beginPath();\n        lineCtx.moveTo(s.start[0], s.start[1])\n        lineCtx.lineTo(s.end[0], s.end[1])\n        lineCtx.stroke();\n      })\n    }\n\n    const letterCtx = letterCanvas.current?.getContext('2d');\n    if (letterCtx) {\n      const fontSize = Math.floor(.5 * imgCtx.canvas.width / puzzle.width);\n      letterCtx.canvas.width = imgCtx.canvas.width;\n      letterCtx.canvas.height = imgCtx.canvas.height;\n      letterCtx.font = `bold ${fontSize}px Arial`;\n      letterCtx.fillStyle = '#FF0077FF';\n      const letters = puzzle.getLetters();\n      const g = Gradient.stoplight();\n      puzzle.getBoxes().forEach((s, i) => {\n        letterCtx.fillStyle = `rgb(${g.eval(puzzle.getConfidence(i)).join(',')})`;\n        letterCtx.fillText(letters[i][0], s[0], s[3]);\n      });\n    }\n  }\n\n  function reSolve() {\n    const words = getWords();\n    puzzle?.setWords(words);\n    const solutions = puzzle?.solve();\n    console.log(solutions);\n    const lineCtx = lineCanvas.current?.getContext('2d');\n    if (!solutions) return;\n    lineCtx?.clearRect(0, 0, lineCtx.canvas.width, lineCtx.canvas.height);\n    if (lineCtx) {\n      lineCtx.lineWidth = 5;\n      lineCtx.strokeStyle = '#5555FFFF';\n      solutions.forEach(s => {\n        lineCtx.beginPath();\n        lineCtx.moveTo(s.start[0], s.start[1])\n        lineCtx.lineTo(s.end[0], s.end[1])\n        lineCtx.stroke();\n      })\n    }\n  }\n\n  function rescale() {\n    // rescale canvases\n    const ctx = imgCanvas.current?.getContext('2d');\n    if (!ctx) return;\n    let xProp = ctx.canvas.width / window.outerWidth;\n    const yProp = ctx.canvas.height / window.outerHeight;\n    if (window.outerWidth > 768) {\n      xProp *= .8;\n    }\n    const big = Math.max(xProp, yProp);\n    setRescaleVal(.9 / big);\n  }\n\n  function canvasClick(e: React.MouseEvent<HTMLCanvasElement, MouseEvent>) {\n    const canvas = letterCanvas.current;\n    if (!canvas || !puzzle) return;\n    const ctx = canvas.getContext('2d');\n    if (!ctx) return;\n    const rect = canvas.getBoundingClientRect();\n    const x = (e.clientX - (rect?.left || 0)) / rescaleVal;\n    const y = (e.clientY - (rect?.top || 0)) / rescaleVal;\n    console.log(x, y)\n    const clicked = puzzle?.inBox(x, y);\n    console.log(clicked);\n    if (clicked) {\n      setChangeLetterModal({\n        ctx,\n        index: clicked.index,\n        letter: clicked.letter,\n        box: clicked.box,\n        puzzleWidth: puzzle.width\n      })\n    }\n  }\n\n  function onChangeSumbit(newLetter: string | undefined) {\n    if (!changeLetterModal) return;\n    if (newLetter) {\n      puzzle?.changeLetter(changeLetterModal.index, newLetter);\n      reSolve();\n    }\n    setChangeLetterModal(undefined);\n  }\n\n  const toDisp = (b: boolean) => b ? 'block' : 'none';\n\n  useEffect(() => console.log(letterOffset), [letterOffset])\n\n  return (\n    <div className='flex flex-col md:flex-row'>\n      <div className='w-screen max-w-screen grid grid-flow-row justify-center md:justify-start p-4 md:w-1/5 md:flex flex-col items-start md:pl-4'>\n        <div className=\"flex flex-row\">\n          {\n            modelNames\n              .map((model, i) => {\n                const inter = model.substring(0, model.lastIndexOf('/'));\n                const name = inter.substring(inter.lastIndexOf('/') + 1);\n                return <button className={`px-2 h-8 bg-blue-${modelIndex === i ? '600' : '400'} rounded-lg ml-3 self-end ml-3`} onClick={() => setModelIndex(i)}>{name}</button>\n              })\n          }\n        </div>\n        <p className=\"text-white text-left text-sm\">Choose an image of the puzzle</p>\n        <input type='file' onChange={(e) => onFileInput(e)} />\n        <p className=\"text-white text-left text-sm\">Choose an image of the words to find</p>\n        <input type='file' onChange={(e) => readWords(e)} />\n        <p className=\"text-white text-left text-sm\">Or type the words to find below, or leave it blank to search for any words</p>\n        <div className='w-2/3 mt-4 w-full max-w-xs flex'>\n          <textarea className='border-none p-1 bg-blue-50 rounded-xl flex-grow' rows={3} value={wordString} onChange={(e) => setWordString(e.target.value)} />\n          <button className='w-8 h-8 bg-blue-600 rounded-lg ml-3 self-end' onClick={reSolve}>✓</button>\n        </div>\n        {changeLetterModal && <ChangeLetterModal ctx={changeLetterModal.ctx}\n          index={changeLetterModal.index}\n          letter={changeLetterModal.letter}\n          box={changeLetterModal.box}\n          puzzleWidth={changeLetterModal.puzzleWidth}\n          close={(newLetter) => onChangeSumbit(newLetter)}\n        />}\n        <button className={`py-1 rounded-xl px-2 my-2 md:my-4 max-w-xs bg-${imgVisible ? 'blue-600' : 'gray-100'} hover:bg-blue-400 transform transition transition-color duration-300`} onClick={() => setImgVisible(!imgVisible)} >Toggle Image</button>\n        <button className={`py-1 rounded-xl px-2 my-2 md:my-4 max-w-xs bg-${boxesVisible ? 'blue-600' : 'gray-100'} hover:bg-blue-400 transform transition transition-color duration-300`} onClick={() => setBoxesVisible(!boxesVisible)} >Toggle Boxes</button>\n        <button className={`py-1 rounded-xl px-2 my-2 md:my-4 max-w-xs bg-${linesVisible ? 'blue-600' : 'gray-100'} hover:bg-blue-400 transform transition transition-color duration-300`} onClick={() => setLinesVisible(!linesVisible)} >Toggle Solutions</button>\n        <button className={`py-1 rounded-xl px-2 my-2 md:my-4 max-w-xs bg-${lettersVisible ? 'blue-600' : 'gray-100'} hover:bg-blue-400 transform transition transition-color duration-300`} onClick={() => setLettersVisible(!lettersVisible)} >Toggle Letters</button>\n        <div className='flex flex-row justify-center'>\n          <button className={`py-1 rounded-l-xl m-r-1 px-2 my-2 md:my-4 max-w-xs bg-blue-600 hover:bg-blue-400 transform transition transition-color duration-300`} onClick={() => setLetterOffset(letterOffset - 5)} >{'<'}</button>\n          <button className={`py-1 rounded-r-xl m-l-1 px-2 my-2 md:my-4 max-w-xs bg-blue-600 hover:bg-blue-400 transform transition transition-color duration-300`} onClick={() => setLetterOffset(letterOffset + 5)} >{'>'}</button>\n        </div>\n        {/* </div> */}\n      </div>\n      <div className='flex flex-grow relative justify-center' style={{}}>\n        <canvas className='absolute origin-top-center md:origin-top-left md:left-0' ref={imgCanvas} style={{ display: toDisp(imgVisible), transform: `scale(${rescaleVal})` }}></canvas>\n        <canvas className='absolute origin-top-center md:origin-top-left md:left-0' ref={boxCanvas} style={{ display: toDisp(boxesVisible), transform: `scale(${rescaleVal})` }}></canvas>\n        <canvas className='absolute origin-top-center md:origin-top-left md:left-0' ref={lineCanvas} style={{ display: toDisp(linesVisible), transform: `scale(${rescaleVal})` }}></canvas>\n        <canvas className='absolute origin-top-center md:origin-top-left md:left-0' ref={letterCanvas} onClick={e => canvasClick(e)} style={letterStyle}></canvas>\n      </div>\n      <div className=\"target\">\n\n      </div>\n    </div>\n  )\n}\n\nfunction ChangeLetterModal(props: {\n  ctx: CanvasRenderingContext2D,\n  index: number,\n  letter: string,\n  box: number[],\n  puzzleWidth: number,\n  close: (newLetter?: string) => void\n}) {\n  const [newLetter, setNewLetter] = useState<string>('');\n  function onSubmit() {\n    console.log(props.box)\n    props.ctx.beginPath();\n    props.ctx.clearRect(props.box[0], props.box[2],\n      props.box[1] - props.box[0],\n      props.box[3] - props.box[2]);\n    props.ctx.stroke();\n    const fontSize = Math.floor(.5 * props.ctx.canvas.width / props.puzzleWidth);\n    props.ctx.font = `bold ${fontSize}px Arial`;\n    props.ctx.fillStyle = '#2222FFFF';\n    props.ctx.fillText(newLetter, props.box[0], props.box[2] + (props.box[3] - props.box[2]));\n    props.close(newLetter);\n  }\n  return (\n    <div className='change-letter-modal'>\n      <div>\n        <p>Change \"{props.letter}\" to:</p>\n        <form onSubmit={onSubmit}>\n          <input autoFocus type='text' value={newLetter} onChange={e => setNewLetter(e.target.value[0]?.toUpperCase())}></input>\n          <div>\n            <button onClick={() => props.close()}>Cancel</button>\n            <button onClick={onSubmit} type='submit'>Submit</button>\n          </div>\n        </form>\n      </div>\n    </div>\n  )\n}","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { WordsearchSolver } from './components/read-and-solve';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <WordsearchSolver />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}
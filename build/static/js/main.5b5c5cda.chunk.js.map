{"version":3,"sources":["logic/image-reader.ts","logic/bw-image-reader.ts","logic/solver.ts","logic/gradient.ts","logic/read-and-solve.ts","components/read-and-solve.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ImageReader","width","height","data","this","x","y","i","BWImage","averageColor","v","buff","Uint8ClampedArray","getPixel","newArray","Uint8Array","set","threshhold","corners","hiContrast","Math","floor","t","fill","setPixel","l","r","b","xPlus","xMinus","yPlus","yMinus","colorImage","nPixels","bwData","sum","avg","colorData","getData","console","log","w","h","WordSearch","letters","words","confidences","boxes","map","toUpperCase","m","length","Error","undefined","forEach","box","index","letter","sb","s","solutions","checkWord","push","word","start","getBoxCenter","end","letter1","ret","checkLetter","vector","nx","ny","getLetter","Gradient","stops","positions","n","c","analyzeBoxes","contexts","a","cropBoxes","Float32Array","dx","dy","max","padX","ceil","padY","x1","y1","x2","y2","boxIndices","Int32Array","allImageData","imageTensor","tf","boxTensor","boxIndicesTensor","CROP_SIZE","resizedTensor","cropAndResize","shape","infer","canvas","img","g","stoplight","lineWidth","strokeStyle","eval","join","beginPath","rect","stroke","Promise","resolve","reject","model","out","predict","ds","dataSync","maxes","Array","from","normalized","normalize","o","arrayMax","slice","min","arrayMin","d","WordsearchSolver","imgCanvas","useRef","boxCanvas","letterCanvas","lineCanvas","useState","puzzle","setPuzzle","wordString","setWordString","imgVisible","setImgVisible","boxesVisible","setBoxesVisible","linesVisible","setLinesVisible","lettersVisible","setLettersVisible","rescaleVal","setRescaleVal","letterOffset","setLetterOffset","letterStyle","setLetterStyle","changeLetterModal","setChangeLetterModal","onFileInput","e","current","getContext","line","target","files","f","image","Image","src","window","URL","webkitURL","createObjectURL","onload","screenWidth","outerWidth","rescale","drawImage","idt","getImageData","bw","fromColor","toFill","copy","newBlank","getAverageColor","getPixeli","fillFromi","maxHeight","reduce","filteredBoxes","filter","sort","ws","analyzeImage","getWords","then","split","splice","pop","englishwords","reSolve","setWords","solve","lineCtx","clearRect","moveTo","lineTo","ctx","xProp","yProp","outerHeight","big","useEffect","addEventListener","removeEventListener","toString","imgCtx","letterCtx","fontSize","font","fillStyle","getLetters","getBoxes","getConfidence","fillText","drawPuzzle","newLetterStyle","display","toDisp","transform","className","type","onChange","imgPath","Tesseract","recognize","res","text","catch","err","alert","readWords","rows","value","onClick","ChangeLetterModal","puzzleWidth","close","newLetter","changeLetter","onChangeSumbit","style","ref","getBoundingClientRect","clientX","left","clientY","top","clicked","inBox","canvasClick","props","setNewLetter","onSubmit","autoFocus","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6rl2BAEaA,EAAb,WACE,WAAmBC,EAAsBC,EAAwBC,GAAkB,yBAAhEF,QAA+D,KAAzCC,SAAyC,KAAjBC,OAC/DC,KAAKH,MAAQA,EACbG,KAAKF,OAASA,EACdE,KAAKD,KAAOA,EAJhB,2CAOE,WACE,OAAOC,KAAKD,OARhB,sBAWE,SAASE,EAAWC,GAClB,IAAMC,EAAIH,KAAKH,MAAQI,EAAIC,EAC3B,MAAO,CAACF,KAAKD,KAAKA,KAAKI,GAAIH,KAAKD,KAAKA,KAAKI,EAAI,GAAIH,KAAKD,KAAKA,KAAKI,EAAI,GAAIH,KAAKD,KAAKA,KAAKI,EAAI,QAbhG,K,wBCEaC,EAAb,WAEE,WAAoBL,EACDF,EACAC,EACCO,GAAuB,yBAHvBN,OAGsB,KAFvBF,QAEuB,KADvBC,SACuB,KAAtBO,eALtB,2CA2BE,WACE,OAAOL,KAAKD,OA5BhB,6BA+BE,WACE,OAAOC,KAAKK,eAhChB,uBAmCE,SAAUF,GACR,OAAOH,KAAKD,KAAKI,KApCrB,sBAuCE,SAASF,EAAWC,GAClB,OAAOF,KAAKD,KAAKE,EAAID,KAAKH,MAAQK,KAxCtC,sBA2CE,SAASD,EAAWC,EAAWI,GAC7BN,KAAKD,KAAKE,EAAID,KAAKH,MAAQK,GAAKI,IA5CpC,sBA+CE,WAEE,IADA,IAAMC,EAAO,IAAIC,kBAAkBR,KAAKH,MAAQG,KAAKF,OAAS,GACrDG,EAAI,EAAGA,EAAID,KAAKH,MAAOI,IAC9B,IAAK,IAAIC,EAAI,EAAGA,EAAIF,KAAKF,OAAQI,IAC/BK,EAAK,GAAKL,EAAIF,KAAKH,MAAQI,IAAMD,KAAKS,SAASR,EAAGC,GAClDK,EAAK,EAAI,GAAKL,EAAIF,KAAKH,MAAQI,IAAMD,KAAKS,SAASR,EAAGC,GACtDK,EAAK,EAAI,GAAKL,EAAIF,KAAKH,MAAQI,IAAMD,KAAKS,SAASR,EAAGC,GACtDK,EAAK,EAAI,GAAKL,EAAIF,KAAKH,MAAQI,IAAM,IAGzC,OAAOM,IAzDX,kBA4DE,WACE,IAAMG,EAAW,IAAIC,WAAWX,KAAKH,MAAQG,KAAKF,QAElD,OADAY,EAASE,IAAIZ,KAAKD,MACX,IAAIK,EACTM,EACAV,KAAKH,MACLG,KAAKF,OACLE,KAAKK,gBAnEX,uBAsEE,SAAUF,EAAWU,EAAoBC,EAAkBC,GACzD,IAAMd,EAAIe,KAAKC,MAAMd,EAAIH,KAAKH,OACxBK,EAAIc,KAAKC,MAAMd,EAAIH,KAAKH,OACxBqB,EAAIH,EACVf,KAAKmB,KAAKlB,EAAGC,EAAGW,EAAYC,EAASI,KA1EzC,kBA6EE,SAAKjB,EAAWC,EAAWW,EAAoBC,EAAkBC,GAC/D,GAAIf,KAAKS,SAASR,EAAGC,GAAKW,EAAY,CACpCb,KAAKoB,SAASnB,EAAGC,EAAG,KACpBa,EAAWK,SAASnB,EAAGC,EAAG,GACtBD,EAAIa,EAAQO,IAAGP,EAAQO,EAAIpB,GAC3BA,EAAIa,EAAQQ,IAAGR,EAAQQ,EAAIrB,GAC3BC,EAAIY,EAAQI,IAAGJ,EAAQI,EAAIhB,GAC3BA,EAAIY,EAAQS,IAAGT,EAAQS,EAAIrB,GAE/B,IAAMsB,EAASvB,EAAI,EACbwB,EAAUxB,EAAID,KAAKH,MAAQ,EAC3B6B,EAASxB,EAAI,EACbyB,EAAUzB,EAAIF,KAAKF,OAAS,EAG9B2B,GAAQzB,KAAKmB,KAAKlB,EAAI,EAAGC,EAAGW,EAAYC,EAASC,GACjDS,GAAOxB,KAAKmB,KAAKlB,EAAI,EAAGC,EAAGW,EAAYC,EAASC,GAChDY,GAAQ3B,KAAKmB,KAAKlB,EAAGC,EAAI,EAAGW,EAAYC,EAASC,GACjDW,GAAO1B,KAAKmB,KAAKlB,EAAGC,EAAI,EAAGW,EAAYC,EAASC,GAEhDU,GAAUE,GAAQ3B,KAAKmB,KAAKlB,EAAI,EAAGC,EAAI,EAAGW,EAAYC,EAASC,GAC/DU,GAAUC,GAAO1B,KAAKmB,KAAKlB,EAAI,EAAGC,EAAI,EAAGW,EAAYC,EAASC,GAC9DS,GAASG,GAAQ3B,KAAKmB,KAAKlB,EAAI,EAAGC,EAAI,EAAGW,EAAYC,EAASC,GAC9DS,GAASE,GAAO1B,KAAKmB,KAAKlB,EAAI,EAAGC,EAAI,EAAGW,EAAYC,EAASC,OApGvE,wBAOE,SAAiBa,GAMf,IALA,IAAMC,EAAUD,EAAW/B,MAAQ+B,EAAW9B,OACxCgC,EAAS,IAAInB,WAAWkB,GAC1BE,EAAM,EACNC,EAAM,EACJC,EAA+BL,EAAWM,UAAUnC,KACjDI,EAAI,EAAGA,EAAI0B,EAAS1B,IAClB,OAALA,GAAYgC,QAAQC,IAAKH,EAAU,EAAI9B,GAAK8B,EAAU,EAAI9B,EAAI,GAAK8B,EAAU,EAAI9B,EAAI,IAEzF4B,GADAC,EAAMhB,KAAKC,OAAOgB,EAAU,EAAI9B,GAAK8B,EAAU,EAAI9B,EAAI,GAAK8B,EAAU,EAAI9B,EAAI,IAAM,GAEpF2B,EAAO3B,GAAK6B,EAGd,OADAG,QAAQC,IAAIL,EAAKF,GACV,IAAIzB,EAAQ0B,EAAQF,EAAW/B,MAAO+B,EAAW9B,OAAQkB,KAAKC,MAAMc,EAAMF,MApBrF,sBAuBE,SAAgBQ,EAAWC,GACzB,OAAO,IAAIlC,EAAQ,IAAIO,WAAW0B,EAAIC,GAAGnB,KAAK,KAAMkB,EAAGC,EAAG,SAxB9D,K,SCFaC,EAAb,WAGE,WACEC,EACO3C,EACAC,EACP2C,EACQC,EACAC,GAGR,GAH4B,yBAJrB9C,QAIoB,KAHpBC,SAGoB,KADnB4C,cACmB,KAAnBC,QAAmB,KARrBH,aAQqB,OAPrBC,WAOqB,EAC3BzC,KAAKwC,QAAUA,EAAQI,KAAI,SAACvB,GAAD,OAAOA,EAAEwB,iBACpC7C,KAAKyC,MAAQA,EAAMG,KAAI,SAAAE,GAAC,OAAIA,EAAED,kBAAkB,GAC5C7C,KAAKwC,QAAQO,SAAW/C,KAAK2C,MAAMI,OACrC,MAAM,IAAIC,MAAM,8CAbtB,6CAiBE,SAAU/C,EAAWC,GACnB,OAAOF,KAAKwC,QAAQxC,KAAKH,MAAQK,EAAID,KAlBzC,sBAqBE,SAASwC,GACPzC,KAAKyC,MAAQA,EAAMG,KAAI,SAAAP,GAAC,OAAIA,EAAEQ,mBAtBlC,0BAyBE,SAAa1C,EAAWkB,GACtBrB,KAAKwC,QAAQrC,GAAKkB,EAAEwB,gBA1BxB,0BA6BE,SAAa5C,EAAWC,GACtB,IAAMqB,EAAIvB,KAAK2C,MAAM3C,KAAKH,MAAQK,EAAID,GACtC,MAAO,CAACsB,EAAE,IAAMA,EAAE,GAAKA,EAAE,IAAM,EAAGA,EAAE,IAAMA,EAAE,GAAKA,EAAE,IAAM,KA/B7D,2BAkCE,SAAcpB,GACZ,OAAOH,KAAK0C,YAAYvC,IAAM,IAnClC,mBAyCE,SAAMF,EAAWC,GAAwE,IAAD,OAClFoB,OAAgE2B,EAMpE,OALAjD,KAAK2C,MAAMO,SAAQ,SAACC,EAAKhD,GAClBgD,EAAI,GAAKlD,GAAOA,EAAIkD,EAAI,IAAQA,EAAI,GAAKjD,GAAOA,EAAIiD,EAAI,KAC3D7B,EAAI,CAAC8B,MAAOjD,EAAGkD,OAAQ,EAAKb,QAAQrC,GAAIgD,WAGrC7B,IAhDX,sBAmDE,WACE,OAAOtB,KAAK2C,QApDhB,wBAuDE,WACE,OAAO3C,KAAKwC,UAxDhB,sBA2DE,WACE,OAAOxC,KAAKyC,QA5DhB,sBA+DE,WAAY,IAAD,OACLa,EAAK,GAOT,OANAtD,KAAKwC,QAAQU,SAAQ,SAAC7B,EAAGlB,GACb,IAANA,GAAWA,EAAI,EAAKN,OAAS,IAC/ByD,GAAM,MAERA,GAAMjC,EAAI,OAELiC,IAvEX,mBA0EE,WAAS,IAEHC,EACAtD,EAAGC,EAHD,OACAsD,EAAwB,GAkB9B,OAfAxD,KAAKwC,QAAQU,SAAQ,SAAC7B,EAAGlB,GACvB,EAAKsC,MAAMS,SAAQ,SAAAb,GACjBpC,EAAIE,EAAI,EAAKN,MACbK,EAAIc,KAAKC,MAAMd,EAAI,EAAKN,QACxB0D,EAAI,EAAKE,UAAUpB,EAAGhB,EAAGpB,EAAGC,KAE1BsD,EAAUE,KAAK,CACbC,KAAMtB,EACNuB,MAAO,EAAKC,aAAa5D,EAAGC,GAC5B4D,IAAK,EAAKD,aAAaN,EAAE,GAAIA,EAAE,YAMhCC,IA7FX,uBAgGE,SAAUG,EAAcI,EAAiB9D,EAAWC,GAClD,GAAI6D,GAAWJ,EAAK,GAClB,OAAO,KACT,IAAIK,EAA+B,KASnC,OADAA,GADAA,GADAA,GADAA,GADAA,GADAA,GADAA,GADAA,EAAMA,GAAOhE,KAAKiE,YAAYN,EAAM,EAAG1D,EAAGC,EAAG,EAAE,GAAI,MACtCF,KAAKiE,YAAYN,EAAM,EAAG1D,EAAGC,EAAG,EAAE,EAAG,MACrCF,KAAKiE,YAAYN,EAAM,EAAG1D,EAAGC,EAAG,EAAE,EAAG,MACrCF,KAAKiE,YAAYN,EAAM,EAAG1D,EAAGC,EAAG,CAAC,GAAI,MACrCF,KAAKiE,YAAYN,EAAM,EAAG1D,EAAGC,EAAG,CAAC,EAAG,MACpCF,KAAKiE,YAAYN,EAAM,EAAG1D,EAAGC,EAAG,CAAC,GAAI,MACrCF,KAAKiE,YAAYN,EAAM,EAAG1D,EAAGC,EAAG,CAAC,EAAG,MACpCF,KAAKiE,YAAYN,EAAM,EAAG1D,EAAGC,EAAG,CAAC,EAAG,MA3GrD,yBAgHE,SAAYyD,EAAcP,EAAenD,EAAWC,EAAWgE,GAC7D,IAAMC,EAAKlE,EAAIiE,EAAO,GAChBE,EAAKlE,EAAIgE,EAAO,GACtB,OAAId,GAASO,EAAKZ,OAET,CAAC9C,EAAGC,GAETiE,EAAK,GAAKA,GAAMnE,KAAKH,OAASuE,EAAK,GAAKA,GAAMpE,KAAKF,OAC9C,KAELE,KAAKqE,UAAUF,EAAIC,IAAOT,EAAKP,GAC1BpD,KAAKiE,YAAYN,EAAMP,EAAQ,EAAGe,EAAIC,EAAIF,GAG1C,SA9Hb,KCFaI,EAAb,WACE,WAAoBC,EACAC,GAAsB,yBADtBD,QACqB,KAArBC,YAFtB,wCAIE,SAAKC,GAAY,IAAD,OACVrB,EAAQ,EACZ,GAAS,GAALqB,EACF,OAAOzE,KAAKuE,MAAM,GAEpB,KAAOE,EAAIzE,KAAKwE,UAAUpB,IACxBA,IACF,IAAM9B,GAAKmD,EAAIzE,KAAKwE,UAAUpB,EAAQ,KAAOpD,KAAKwE,UAAUpB,GAASpD,KAAKwE,UAAUpB,EAAQ,IAC5F,OAAQpD,KAAKuE,MAAMnB,EAAQ,GAAGR,KAAI,SAAC8B,EAAEvE,GAAH,OAASuE,GAAK,EAAKH,MAAMnB,GAAOjD,GAAKuE,GAAKpD,QAZhF,wBAeE,WACE,OAAO,IAAIgD,EAAS,CAAC,CAAC,IAAK,IAAK,KAAM,CAAC,IAAK,EAAG,GAAI,CAAC,EAAG,IAAK,IAAK,CAAC,EAAG,GAAI,QAhB7E,K,SC0CeK,E,oFAAf,WAA4B5D,EAAqB4B,EAAmBF,EAAiBmC,GAArF,2CAAAC,EAAA,6DACE1C,QAAQC,IAAI,gBACN0C,EAAY,IAAIC,aAA4B,EAAfpC,EAAMI,QACvB,EACZV,EAAItB,EAAWlB,MAAQ,EACvByC,EAAIvB,EAAWjB,OAAS,EAC9B6C,EAAMO,SAAQ,SAAC3B,EAAGpB,GAChB,IAAM6E,EAAKzD,EAAE,GAAKA,EAAE,GACd0D,EAAK1D,EAAE,GAAKA,EAAE,GACd2D,EAAMlE,KAAKkE,IAAIF,EAAIC,GACnBE,EAAOnE,KAAKoE,MAAMF,EAAMF,GAAM,GAPpB,EAQVK,EAAOrE,KAAKoE,MAAMF,EAAMD,GAAM,GARpB,EASVK,EAAK/D,EAAE,GAAK4D,EACZI,EAAKhE,EAAE,GAAK8D,EACZG,EAAKjE,EAAE,GAAK4D,EACZM,EAAKlE,EAAE,GAAK8D,EAClBP,EAAc,EAAJ3E,GAASoF,EAAKjD,EACxBwC,EAAc,EAAJ3E,EAAQ,GAAKmF,EAAKjD,EAC5ByC,EAAc,EAAJ3E,EAAQ,GAAKsF,EAAKnD,EAC5BwC,EAAc,EAAJ3E,EAAQ,GAAKqF,EAAKnD,KAGxBqD,EAAa,IAAIC,WAAWhD,EAAMI,QAAQ5B,KAAK,GAE/CyE,EAAe7E,EAAWmB,UAG1B2D,EAAqCC,IAAUF,EAAc,CAAC,EAAG7E,EAAWjB,OAAQiB,EAAWlB,MAAO,IACtGkG,EAAmCD,IAAUhB,EAAW,CAACnC,EAAMI,OAAQ,IACvEiD,EAA0CF,IAAUJ,EAAY,CAAC/C,EAAMI,SACvEkD,EAA8B,CAAC,GAAI,IAEzC9D,QAAQC,IAAI,EAAGrB,EAAWjB,OAAQiB,EAAWlB,MAAO,GACpDsC,QAAQC,IAAIO,EAAMI,OAAQ,GAC1BZ,QAAQC,IAAIO,EAAMI,QAGZmD,EAAgBJ,IAASK,cAAcN,EAAaE,EAAWC,EAAkBC,GACvF9D,QAAQC,IAAI8D,EAAcE,OAtC5B,UAuCwBC,EAAMH,GAvC9B,QAuDE,IAhBM1D,EAvCR,OA0CEoC,EAASzB,IAAImD,OAAOzG,MAAQ+E,EAAS2B,IAAID,OAAOzG,MAChD+E,EAASzB,IAAImD,OAAOxG,OAAS8E,EAAS2B,IAAID,OAAOxG,OAC3C0G,EAAIlC,EAASmC,YACnB7B,EAASzB,IAAIuD,UAAY,EACzB/D,EAAMO,SAAQ,SAAC3B,EAAGpB,GAChByE,EAASzB,IAAIwD,YAAb,cAAkCH,EAAEI,KAAKpE,EAAQrC,GAAG,IAAI0G,KAAK,KAA7D,KACAjC,EAASzB,IAAI2D,YACblC,EAASzB,IAAI4D,KAAKxF,EAAE,GAAK,EAAGA,EAAE,GAAK,EAAGA,EAAE,GAAKA,EAAE,GAAK,EAAGA,EAAE,GAAKA,EAAE,GAAK,GACrEqD,EAASzB,IAAI6D,YAIXnH,EAAQ,EACL8C,EAAM9C,GAAO,GAAK8C,EAAM9C,EAAQ,GAAG,IAAIA,IAvDhD,OAwDEA,IACMC,EAAS6C,EAAMI,OAASlD,EACxB6C,EAAcF,EAAQI,KAAI,SAAAvB,GAAC,OAAIA,EAAE,MACvCc,QAAQC,IAAIvC,EAAOC,GA3DrB,kBA6DS,IAAIyC,EAAWC,EAAQI,KAAI,SAAAvB,GAAC,OAAIA,EAAE,MAAKxB,EAAOC,EAAQ2C,EAAOC,EAAaC,IA7DnF,6C,sBAqFA,SAAS0D,EAAMnF,GAEb,OADAiB,QAAQC,IAAI,aACL,IAAI6E,QAAJ,uCAAuB,WAAOC,EAASC,GAAhB,uBAAAtC,EAAA,sEACRiB,IAAkB,oCADV,OACtBsB,EADsB,OAEtBC,EAAMD,EAAME,QAAQpG,GAC1BiB,QAAQC,IAAIiF,EAAIjB,OACVmB,EAAKF,EAAIG,WACTC,EAAQC,MAAMC,KAAK7B,IAAUuB,EAAK,GAAGG,YAErCI,EAAaC,EAAUN,EAAI,EAAG,GACpCL,EAASO,EAAM7E,KAAI,SAACkF,EAAG3H,GAAJ,MAAU,CAlIhB,6BAkI0B2H,GAAIC,EAASH,EAAWI,MAAM,GAAK7H,EAAG,IAAMA,EAAI,UAR3D,2CAAvB,yDAsCT,SAAS0H,EAAU9H,EAAyD8E,EAAWtD,GACrFY,QAAQC,IAAIrC,GACZ,IAAMmF,EAAM6C,EAAShI,GACfkI,EAeR,SAAkBpD,GAEhB,IADA,IAAI/B,EAAI+B,EAAE,GACD1E,EAAI,EAAGA,EAAI0E,EAAE9B,OAAQ5C,IACxB0E,EAAE1E,GAAK2C,IACTA,EAAI+B,EAAE1E,IAEV,OAAO2C,EArBKoF,CAASnI,GAErB,OADAoC,QAAQC,IAAI8C,EAAK+C,GACVlI,EAAK6C,KAAI,SAAAuF,GAAC,OAAMA,EAAIF,IAAQ/C,EAAM+C,IAAS1G,EAAIsD,GAAKA,KAI7D,SAASkD,EAASlD,GAEhB,IADA,IAAI/B,EAAI+B,EAAE,GACD1E,EAAI,EAAGA,EAAI0E,EAAE9B,OAAQ5C,IACxB0E,EAAE1E,GAAK2C,IACTA,EAAI+B,EAAE1E,IAEV,OAAO2C,E,uCCjKF,SAASsF,IACd,IAAMC,EAAYC,iBAA0B,MACtCC,EAAYD,iBAA0B,MACtCE,EAAeF,iBAA0B,MACzCG,EAAaH,iBAA0B,MAC7C,EAA4BI,qBAA5B,mBAAOC,EAAP,KAAeC,EAAf,KACA,EAAoCF,mBAAiB,IAArD,mBAAOG,EAAP,KAAmBC,EAAnB,KACA,EAAoCJ,oBAAkB,GAAtD,mBAAOK,EAAP,KAAmBC,EAAnB,KACA,EAAwCN,oBAAkB,GAA1D,mBAAOO,EAAP,KAAqBC,EAArB,KACA,EAAwCR,oBAAkB,GAA1D,mBAAOS,EAAP,KAAqBC,EAArB,KACA,EAA4CV,oBAAkB,GAA9D,mBAAOW,EAAP,KAAuBC,EAAvB,KACA,EAAoCZ,mBAAiB,GAArD,mBAAOa,EAAP,KAAmBC,EAAnB,KACA,EAAwCd,mBAAiB,GAAzD,mBAAOe,EAAP,KAAqBC,EAArB,KACA,EAAsChB,qBAAtC,mBAAOiB,EAAP,KAAoBC,EAApB,KACA,EAAkDlB,qBAAlD,mBAAOmB,GAAP,KAA0BC,GAA1B,KA6CA,SAASC,GAAYC,GAAyC,IAAD,UACrDzD,EAAG,UAAG8B,EAAU4B,eAAb,aAAG,EAAmBC,WAAW,MACpC/G,EAAG,UAAGoF,EAAU0B,eAAb,aAAG,EAAmBC,WAAW,MACpC7G,EAAM,UAAGmF,EAAayB,eAAhB,aAAG,EAAsBC,WAAW,MAC1CC,EAAI,UAAG1B,EAAWwB,eAAd,aAAG,EAAoBC,WAAW,MAC5C,GAAM3D,GAAOpD,GAAOE,GAAU8G,EAA9B,CACA,IAAMvF,EAAqB,CAAE2B,MAAKpD,MAAKE,SAAQ8G,QAC/C,IAAI,UAAAH,EAAEI,OAAOC,aAAT,eAAgBtH,SAAUiH,EAAEI,OAAOC,MAAMtH,OAAS,EAAG,CACvD,IAAMuH,EAAUN,EAAEI,OAAOC,MAAM,GACzBE,EAAQ,IAAIC,MAEhBC,GADUC,OAAOC,KAAOD,OAAOE,WACrBC,gBAAgBP,GAC5BC,EAAME,IAAMA,EACZF,EAAMO,OAAS,WACb,IAAMC,EAAcL,OAAOM,WACjBhK,KAAKiH,IAAI8C,EAAa,KACjBR,EAAM1K,MAAS0K,EAAMzK,OACpCyG,EAAID,OAAOzG,MAAQ0K,EAAM1K,MACzB0G,EAAID,OAAOxG,OAASyK,EAAMzK,OAC1BmL,KAEA1E,EAAI2E,UAAUX,EAAO,EAAG,EAAGA,EAAM1K,MAAO0K,EAAMzK,QAC9CqC,QAAQC,IAAI,eAAgBmI,EAAM1K,MAAO,IAAK0K,EAAMzK,QACpD,IAAMqL,EAAM5E,EAAI6E,aAAa,EAAG,EAAGb,EAAM1K,MAAO0K,EAAMzK,QACtDqC,QAAQC,IAAI+I,GD9Fb,SAAsB5E,EAAkB9D,EAAiBmC,GAE9D,OADAzC,QAAQC,IAAI,gBACL,IAAI6E,QAAJ,uCAAwB,WAAOC,EAASC,GAAhB,mCAAAtC,EAAA,sDAU7B,IATMwG,EAAKjL,EAAQkL,UAAU/E,GACvBgF,EAASF,EAAGG,OACZzK,EAAaX,EAAQqL,SAASJ,EAAGxL,MAAOwL,EAAGvL,QAE3C+B,EAAUwJ,EAAGxL,MAAQwL,EAAGvL,OACxBe,EAAa0K,EAAOG,kBAAoB,GACxC5K,EAAU,CAAEO,EAAGkK,EAAO1L,MAAOyB,EAAG,EAAGJ,EAAGqK,EAAOzL,OAAQyB,EAAG,GACxDoB,EAAQ,GAELxC,EAAI,EAAGA,EAAI0B,EAAS1B,IACvBoL,EAAOI,UAAUxL,GAAKU,IACxBC,EAAQO,EAAIkK,EAAO1L,MACnBiB,EAAQQ,EAAI,EACZR,EAAQI,EAAIqK,EAAOzL,OACnBgB,EAAQS,EAAI,EACZgK,EAAOK,UAAUzL,EAAGU,EAAYC,EAASC,GACzC4B,EAAMe,KAAK,CAAC5C,EAAQO,EAAGP,EAAQQ,EAAGR,EAAQI,EAAGJ,EAAQS,KAjB5B,OAqBvBsK,EAAYlJ,EAAMmJ,QAAO,SAAC5G,EAAK/E,GAAN,OAAYa,KAAKkE,IAAIA,EAAK/E,EAAE,GAAKA,EAAE,MAAK,IACjE4L,EAAgBpJ,EAAMqJ,QAAO,SAACzK,GAAD,OAAOA,EAAE,GAAKA,EAAE,GAAiB,GAAZsK,MAE1CI,MAAK,SAACpH,EAAGtD,GAAJ,OAAUsD,EAAE,GAAKtD,EAAE,GAAKsK,EAAY,EAAIhH,EAAE,GAAKtD,EAAE,MAxBvC,UAyBZoD,EAAa5D,EAAYgL,EAAetJ,EAAOmC,GAzBnC,QAyBvBsH,EAzBuB,OA0B7BhF,EAAQgF,GA1BqB,4CAAxB,yDC+FDC,CAFgB,IAAIvM,EAAY2K,EAAM1K,MAAO0K,EAAMzK,OAAQqL,GAErCiB,KAAYxH,GAC/ByH,MAAK,SAACH,GACLtD,EAAUsD,SAMpB,SAASE,KACP,IAAM3J,EAAQoG,EAAWyD,MAAM,iBAG/B,MAFgB,IAAZ7J,EAAM,IAAUA,EAAM8J,OAAO,EAAG,GACL,IAA3B9J,EAAMA,EAAMM,OAAS,IAAUN,EAAM+J,MACrC/J,EAAMM,OAAS,GACjBZ,QAAQC,IAAIK,GACLA,GAEFgK,EAAaT,QAAO,SAAA3J,GAAC,OAAIA,EAAEU,OAAS,KA2C7C,SAAS2J,KAAW,IAAD,EACXjK,EAAQ2J,KACR,OAANzD,QAAM,IAANA,KAAQgE,SAASlK,GACjB,IAAMe,EAAS,OAAGmF,QAAH,IAAGA,OAAH,EAAGA,EAAQiE,QAC1BzK,QAAQC,IAAIoB,GACZ,IAAMqJ,EAAO,UAAGpE,EAAWwB,eAAd,aAAG,EAAoBC,WAAW,MAC1C1G,IACE,OAAPqJ,QAAO,IAAPA,KAASC,UAAU,EAAG,EAAGD,EAAQvG,OAAOzG,MAAOgN,EAAQvG,OAAOxG,QAC1D+M,IACFA,EAAQnG,UAAY,EACpBmG,EAAQlG,YAAc,YACtBnD,EAAUN,SAAQ,SAAAK,GAChBsJ,EAAQ/F,YACR+F,EAAQE,OAAOxJ,EAAEK,MAAM,GAAIL,EAAEK,MAAM,IACnCiJ,EAAQG,OAAOzJ,EAAEO,IAAI,GAAIP,EAAEO,IAAI,IAC/B+I,EAAQ7F,cAKd,SAASiE,KAAW,IAAD,EAEXgC,EAAG,UAAG5E,EAAU4B,eAAb,aAAG,EAAmBC,WAAW,MAC1C,GAAK+C,EAAL,CACA,IAAIC,EAAQD,EAAI3G,OAAOzG,MAAQ6K,OAAOM,WAChCmC,EAAQF,EAAI3G,OAAOxG,OAAS4K,OAAO0C,YACrC1C,OAAOM,WAAa,MACtBkC,GAAS,IAEX,IAAMG,EAAMrM,KAAKkE,IAAIgI,EAAOC,GAC5B3D,EAAc,GAAK6D,IAzJrBC,qBAAU,WAER,OADA5C,OAAO6C,iBAAiB,SAAUtC,IAC1B,kBAAMP,OAAO8C,oBAAoB,SAAUvC,OAClD,IAEHqC,qBAAU,YA8EV,WAAuB,IAAD,MACpB,IAAK3E,EAAQ,OACb,IAAMnF,EAAYmF,EAAOiE,QACzBzK,QAAQC,IAAIoB,GACZrB,QAAQC,IAAI,QAASoB,EAAUT,OAAQ,eAAgB4F,EAAOyD,WAAWrJ,QACzEZ,QAAQC,IAAIuG,EAAO8E,YAEnB,IAAMC,EAAM,UAAGrF,EAAU4B,eAAb,aAAG,EAAmBC,WAAW,MAC7C,IAAKwD,EAAQ,OAEb,IAAMb,EAAO,UAAGpE,EAAWwB,eAAd,aAAG,EAAoBC,WAAW,MAC3C2C,IACFA,EAAQvG,OAAOzG,MAAQ6N,EAAOpH,OAAOzG,MACrCgN,EAAQvG,OAAOxG,OAAS4N,EAAOpH,OAAOxG,OACtC+M,EAAQnG,UAAY,EACpBmG,EAAQlG,YAAc,YACtBnD,EAAUN,SAAQ,SAAAK,GAChBsJ,EAAQ/F,YACR+F,EAAQE,OAAOxJ,EAAEK,MAAM,GAAIL,EAAEK,MAAM,IACnCiJ,EAAQG,OAAOzJ,EAAEO,IAAI,GAAIP,EAAEO,IAAI,IAC/B+I,EAAQ7F,aAIZ,IAAM2G,EAAS,UAAGnF,EAAayB,eAAhB,aAAG,EAAsBC,WAAW,MACnD,GAAIyD,EAAW,CACb,IAAMC,EAAW5M,KAAKC,MAAM,GAAKyM,EAAOpH,OAAOzG,MAAQ8I,EAAO9I,OAC9D8N,EAAUrH,OAAOzG,MAAQ6N,EAAOpH,OAAOzG,MACvC8N,EAAUrH,OAAOxG,OAAS4N,EAAOpH,OAAOxG,OACxC6N,EAAUE,KAAV,eAAyBD,EAAzB,YACAD,EAAUG,UAAY,YACtB,IAAMtL,EAAUmG,EAAOoF,aACjBvH,EAAIlC,EAASmC,YACnBkC,EAAOqF,WAAW9K,SAAQ,SAACK,EAAGpD,GAC5BwN,EAAUG,UAAV,cAA6BtH,EAAEI,KAAK+B,EAAOsF,cAAc9N,IAAI0G,KAAK,KAAlE,KACA8G,EAAUO,SAAS1L,EAAQrC,GAAG,GAAIoD,EAAE,GAAIA,EAAE,QAhH9C4K,KACC,CAACxF,IAMJ2E,qBAAU,WACR,IAAMc,EAAiB,CACrBC,QAASC,GAAOjF,GAChBkF,UANI,SAAN,OAAgBhF,EAAhB,wBAA0CE,EAA1C,QAQAG,EAAewE,KACd,CAAC/E,EAAgBE,EAAYE,IAwKhC,IAAM6E,GAAS,SAAC/M,GAAD,OAAgBA,EAAI,QAAU,QAK7C,OAFA+L,qBAAU,kBAAMnL,QAAQC,IAAIqH,KAAe,CAACA,IAG1C,sBAAK+E,UAAU,4BAAf,UACE,sBAAKA,UAAU,6HAAf,UACE,mBAAGA,UAAU,+BAAb,2CACA,uBAAOC,KAAK,OAAOC,SAAU,SAAC1E,GAAD,OAAOD,GAAYC,MAChD,mBAAGwE,UAAU,+BAAb,kDACA,uBAAOC,KAAK,OAAOC,SAAU,SAAC1E,GAAD,OAjLnC,SAAmBA,GAAyC,IAAD,EACzD,IAAI,UAAAA,EAAEI,OAAOC,aAAT,eAAgBtH,SAAUiH,EAAEI,OAAOC,MAAMtH,OAAS,EAAG,CACvD,IAAM4L,EAAkBhE,IAAIE,gBAAgBb,EAAEI,OAAOC,MAAM,IAC3DlI,QAAQC,IAAI,eACZD,QAAQC,IAAIuM,GACZC,IAAUC,UAAUF,EAAS,OAC5BtC,MAAK,SAAAyC,GACJ3M,QAAQC,IAAI0M,GACZhG,EAAcgG,EAAI/O,KAAKgP,SAExBC,OAAM,SAAAC,GAAG,OAAI9M,QAAQC,IAAI6M,WAE1BC,MAAM,gBAqKgCC,CAAUnF,MAC9C,mBAAGwE,UAAU,+BAAb,wFACA,sBAAKA,UAAU,kCAAf,UACE,0BAAUA,UAAU,kDAAkDY,KAAM,EAAGC,MAAOxG,EAAY6F,SAAU,SAAC1E,GAAD,OAAOlB,EAAckB,EAAEI,OAAOiF,UAC1I,wBAAQb,UAAU,+CAA+Cc,QAAS5C,GAA1E,uBAED7C,IAAqB,cAAC0F,EAAD,CAAmBtC,IAAKpD,GAAkBoD,IAC9D7J,MAAOyG,GAAkBzG,MACzBC,OAAQwG,GAAkBxG,OAC1BF,IAAK0G,GAAkB1G,IACvBqM,YAAa3F,GAAkB2F,YAC/BC,MAAO,SAACC,GAAD,OA/Bf,SAAwBA,GACjB7F,KACD6F,IACI,OAAN/G,QAAM,IAANA,KAAQgH,aAAa9F,GAAkBzG,MAAOsM,GAC9ChD,MAEF5C,QAAqB7G,IAyBO2M,CAAeF,MAEvC,wBAAQlB,UAAS,wDAAmDzF,EAAa,WAAa,WAA7E,yEAAgKuG,QAAS,kBAAMtG,GAAeD,IAA/M,0BACA,wBAAQyF,UAAS,wDAAmDvF,EAAe,WAAa,WAA/E,yEAAkKqG,QAAS,kBAAMpG,GAAiBD,IAAnN,0BACA,wBAAQuF,UAAS,wDAAmDrF,EAAe,WAAa,WAA/E,yEAAkKmG,QAAS,kBAAMlG,GAAiBD,IAAnN,8BACA,wBAAQqF,UAAS,wDAAmDnF,EAAiB,WAAa,WAAjF,yEAAoKiG,QAAS,kBAAMhG,GAAmBD,IAAvN,4BACA,sBAAKmF,UAAU,+BAAf,UACE,wBAAQA,UAAS,sIAAyIc,QAAS,kBAAM5F,EAAgBD,EAAe,IAAxM,SAA8M,MAC9M,wBAAQ+E,UAAS,sIAAyIc,QAAS,kBAAM5F,EAAgBD,EAAe,IAAxM,SAA8M,YAIlN,sBAAK+E,UAAU,yCAAyCqB,MAAO,GAA/D,UACE,wBAAQrB,UAAU,0DAA0DsB,IAAKzH,EAAWwH,MAAO,CAAExB,QAASC,GAAOvF,GAAawF,UAAU,SAAD,OAAWhF,EAAX,QAC3I,wBAAQiF,UAAU,0DAA0DsB,IAAKvH,EAAWsH,MAAO,CAAExB,QAASC,GAAOrF,GAAesF,UAAU,SAAD,OAAWhF,EAAX,QAC7I,wBAAQiF,UAAU,0DAA0DsB,IAAKrH,EAAYoH,MAAO,CAAExB,QAASC,GAAOnF,GAAeoF,UAAU,SAAD,OAAWhF,EAAX,QAC9I,wBAAQiF,UAAU,0DAA0DsB,IAAKtH,EAAc8G,QAAS,SAAAtF,GAAC,OArE/G,SAAqBA,GACnB,IAAM1D,EAASkC,EAAayB,QAC5B,GAAK3D,GAAWqC,EAAhB,CACA,IAAMsE,EAAM3G,EAAO4D,WAAW,MAC9B,GAAK+C,EAAL,CACA,IAAMlG,EAAOT,EAAOyJ,wBACd9P,GAAK+J,EAAEgG,UAAe,OAAJjJ,QAAI,IAAJA,OAAA,EAAAA,EAAMkJ,OAAQ,IAAM1G,EACtCrJ,GAAK8J,EAAEkG,UAAe,OAAJnJ,QAAI,IAAJA,OAAA,EAAAA,EAAMoJ,MAAO,IAAM5G,EAC3CpH,QAAQC,IAAInC,EAAGC,GACf,IAAMkQ,EAAO,OAAGzH,QAAH,IAAGA,OAAH,EAAGA,EAAQ0H,MAAMpQ,EAAGC,GACjCiC,QAAQC,IAAIgO,GACRA,GACFtG,GAAqB,CACnBmD,MACA7J,MAAOgN,EAAQhN,MACfC,OAAQ+M,EAAQ/M,OAChBF,IAAKiN,EAAQjN,IACbqM,YAAa7G,EAAO9I,UAoDyFyQ,CAAYtG,IAAI6F,MAAOlG,UAM5I,SAAS4F,EAAkBgB,GAQzB,MAAkC7H,mBAAiB,IAAnD,mBAAOgH,EAAP,KAAkBc,EAAlB,KACA,SAASC,IACPtO,QAAQC,IAAImO,EAAMpN,KAClBoN,EAAMtD,IAAInG,YACVyJ,EAAMtD,IAAIH,UAAUyD,EAAMpN,IAAI,GAAIoN,EAAMpN,IAAI,GAC1CoN,EAAMpN,IAAI,GAAKoN,EAAMpN,IAAI,GACzBoN,EAAMpN,IAAI,GAAKoN,EAAMpN,IAAI,IAC3BoN,EAAMtD,IAAIjG,SACV,IAAM4G,EAAW5M,KAAKC,MAAM,GAAKsP,EAAMtD,IAAI3G,OAAOzG,MAAQ0Q,EAAMf,aAChEe,EAAMtD,IAAIY,KAAV,eAAyBD,EAAzB,YACA2C,EAAMtD,IAAIa,UAAY,YACtByC,EAAMtD,IAAIiB,SAASwB,EAAWa,EAAMpN,IAAI,GAAIoN,EAAMpN,IAAI,IAAMoN,EAAMpN,IAAI,GAAKoN,EAAMpN,IAAI,KACrFoN,EAAMd,MAAMC,GAEd,OACE,qBAAKlB,UAAU,sBAAf,SACE,gCACE,yCAAY+B,EAAMlN,OAAlB,WACA,uBAAMoN,SAAUA,EAAhB,UACE,uBAAOC,WAAS,EAACjC,KAAK,OAAOY,MAAOK,EAAWhB,SAAU,SAAA1E,GAAC,aAAIwG,EAAY,UAACxG,EAAEI,OAAOiF,MAAM,UAAhB,aAAC,EAAmBxM,kBAC9F,gCACE,wBAAQyM,QAAS,kBAAMiB,EAAMd,SAA7B,oBACA,wBAAQH,QAASmB,EAAUhC,KAAK,SAAhC,+BCnSGkC,MARf,WACE,OACE,qBAAKnC,UAAU,MAAf,SACE,cAACpG,EAAD,OCMSwI,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBzE,MAAK,YAAkD,IAA/C0E,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCFdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.5b5c5cda.chunk.js","sourcesContent":["import {BWImage} from './bw-image-reader';\r\n\r\nexport class ImageReader {\r\n  constructor(public width: number, public height: number, private data: ImageData) {\r\n    this.width = width;\r\n    this.height = height;\r\n    this.data = data;\r\n  }\r\n\r\n  getData() {\r\n    return this.data\r\n  }\r\n\r\n  getPixel(x: number, y: number) {\r\n    const i = this.width * x + y;\r\n    return [this.data.data[i], this.data.data[i + 1], this.data.data[i + 2], this.data.data[i + 3]]\r\n  }\r\n\r\n}","import { ImageReader } from \"./image-reader\";\r\n\r\ntype Corners = {l: number, r: number, t: number, b: number}\r\n\r\nexport class BWImage {\r\n  // mostly for internal use, usually using fromColor() or copy()\r\n  constructor(private data: Uint8Array, \r\n              public width: number, \r\n              public height: number, \r\n              private averageColor: number) {}\r\n\r\n  static fromColor(colorImage: ImageReader) {\r\n    const nPixels = colorImage.width * colorImage.height;\r\n    const bwData = new Uint8Array(nPixels);\r\n    let sum = 0;\r\n    let avg = 0;\r\n    const colorData: Uint8ClampedArray = colorImage.getData().data;\r\n    for (let i = 0; i < nPixels; i++) {\r\n      if (i == 14235) console.log((colorData[4 * i] + colorData[4 * i + 1] + colorData[4 * i + 2]))\r\n      avg = Math.floor((colorData[4 * i] + colorData[4 * i + 1] + colorData[4 * i + 2]) / 3);\r\n      sum += avg;\r\n      bwData[i] = avg;\r\n    }\r\n    console.log(sum, nPixels)\r\n    return new BWImage(bwData, colorImage.width, colorImage.height, Math.floor(sum / nPixels))\r\n  }\r\n\r\n  static newBlank(w: number, h: number) {\r\n    return new BWImage(new Uint8Array(w * h).fill(255), w, h, 255);\r\n  }\r\n\r\n  getData() {\r\n    return this.data;\r\n  }\r\n\r\n  getAverageColor() {\r\n    return this.averageColor;\r\n  }\r\n\r\n  getPixeli(i: number) {\r\n    return this.data[i]\r\n  }\r\n\r\n  getPixel(x: number, y: number) {\r\n    return this.data[x + this.width * y]\r\n  }\r\n\r\n  setPixel(x: number, y: number, v: number) {\r\n    this.data[x + this.width * y] = v;\r\n  }\r\n\r\n  toCanvas() {\r\n    const buff = new Uint8ClampedArray(this.width * this.height * 4);\r\n    for (var x = 0; x < this.width; x++) {\r\n      for (var y = 0; y < this.height; y++) {\r\n        buff[4 * (y * this.width + x)] = this.getPixel(x, y)\r\n        buff[1 + 4 * (y * this.width + x)] = this.getPixel(x, y)\r\n        buff[2 + 4 * (y * this.width + x)] = this.getPixel(x, y)\r\n        buff[3 + 4 * (y * this.width + x)] = 255\r\n      }\r\n    }\r\n    return buff;\r\n  }\r\n\r\n  copy() {\r\n    const newArray = new Uint8Array(this.width * this.height);\r\n    newArray.set(this.data);\r\n    return new BWImage(\r\n      newArray,\r\n      this.width,\r\n      this.height,\r\n      this.averageColor)\r\n  }\r\n\r\n  fillFromi(i: number, threshhold: number, corners: Corners, hiContrast: BWImage) {\r\n    const x = Math.floor(i % this.width);\r\n    const y = Math.floor(i / this.width);\r\n    const t = hiContrast;\r\n    this.fill(x, y, threshhold, corners, t)\r\n  }\r\n\r\n  fill(x: number, y: number, threshhold: number, corners: Corners, hiContrast: BWImage) {\r\n    if (this.getPixel(x, y) < threshhold) {\r\n      this.setPixel(x, y, 255);\r\n      hiContrast.setPixel(x, y, 0);\r\n      if (x < corners.l) corners.l = x;\r\n      if (x > corners.r) corners.r = x;\r\n      if (y < corners.t) corners.t = y;\r\n      if (y > corners.b) corners.b = y;\r\n\r\n      const xPlus = (x > 0)\r\n      const xMinus = (x < this.width - 1)\r\n      const yPlus = (y > 0)\r\n      const yMinus = (y < this.height - 1)\r\n\r\n      // Can definitely optimize checks\r\n      if (xMinus) this.fill(x - 1, y, threshhold, corners, hiContrast);\r\n      if (xPlus) this.fill(x + 1, y, threshhold, corners, hiContrast);\r\n      if (yMinus) this.fill(x, y - 1, threshhold, corners, hiContrast);\r\n      if (yPlus) this.fill(x, y + 1, threshhold, corners, hiContrast);\r\n\r\n      if (xMinus && yMinus) this.fill(x - 1, y - 1, threshhold, corners, hiContrast);\r\n      if (xMinus && yPlus) this.fill(x - 1, y + 1, threshhold, corners, hiContrast);\r\n      if (xPlus && yMinus) this.fill(x + 1, y - 1, threshhold, corners, hiContrast);\r\n      if (xPlus && yPlus) this.fill(x + 1, y + 1, threshhold, corners, hiContrast);\r\n    }\r\n  }\r\n\r\n}","type Solution = { word: string, start: [number, number], end: [number, number] }\r\n\r\nexport class WordSearch {\r\n  private letters: string[];\r\n  private words: string[];\r\n  constructor(\r\n    letters: string[],\r\n    public width: number,\r\n    public height: number,\r\n    words: string[],\r\n    private confidences: number[],\r\n    private boxes: number[][]) {\r\n    this.letters = letters.map((l) => l.toUpperCase())\r\n    this.words = words.map(m => m.toUpperCase()) || [];\r\n    if (this.letters.length !== this.boxes.length) {\r\n      throw new Error('Length mismatch between boxes and letters.');\r\n    }\r\n  }\r\n\r\n  getLetter(x: number, y: number) {\r\n    return this.letters[this.width * y + x];\r\n  }\r\n\r\n  setWords(words: string[]) {\r\n    this.words = words.map(w => w.toUpperCase());\r\n  }\r\n\r\n  changeLetter(i: number, l: string) {\r\n    this.letters[i] = l.toUpperCase();\r\n  }\r\n\r\n  getBoxCenter(x: number, y: number): [number, number] {\r\n    const b = this.boxes[this.width * y + x]\r\n    return [b[0] + (b[1] - b[0]) / 2, b[2] + (b[3] - b[2]) / 2];\r\n  }\r\n\r\n  getConfidence(i: number) {\r\n    return this.confidences[i] || 0;\r\n  }\r\n\r\n  // tells whether the given coordinate is inside a box,\r\n  // returns the index of the box and the letter \r\n  // undefined if the coordinate is not in a box\r\n  inBox(x: number, y: number): {index: number, letter: string, box: number[]} | undefined {\r\n    let r: {index: number, letter: string, box: number[]} | undefined = undefined;\r\n    this.boxes.forEach((box, i) => {\r\n      if ((box[0] < x) && (x < box[1]) && (box[2] < y) && (y < box[3])) {\r\n        r = {index: i, letter: this.letters[i], box};\r\n      }\r\n    });\r\n    return r;\r\n  }\r\n\r\n  getBoxes() {\r\n    return this.boxes;\r\n  }\r\n\r\n  getLetters() {\r\n    return this.letters;\r\n  }\r\n\r\n  getWords() {\r\n    return this.words;\r\n  }\r\n\r\n  toString() {\r\n    let sb = '';\r\n    this.letters.forEach((l, i) => {\r\n      if (i !== 0 && i % this.width == 0) {\r\n        sb += '\\n'\r\n      }\r\n      sb += l + ' '\r\n    })\r\n    return sb;\r\n  }\r\n\r\n  solve() {\r\n    const solutions: Solution[] = [];\r\n    let s;\r\n    let x, y;\r\n    this.letters.forEach((l, i) => {\r\n      this.words.forEach(w => {\r\n        x = i % this.width;\r\n        y = Math.floor(i / this.width)\r\n        s = this.checkWord(w, l, x, y)\r\n        if (s) {\r\n          solutions.push({\r\n            word: w,\r\n            start: this.getBoxCenter(x, y),\r\n            end: this.getBoxCenter(s[0], s[1])\r\n          })\r\n        }\r\n\r\n      })\r\n    })\r\n    return solutions;\r\n  }\r\n\r\n  checkWord(word: string, letter1: string, x: number, y: number): [number, number] | null {\r\n    if (letter1 != word[0])\r\n      return null\r\n    let ret: [number, number] | null = null;\r\n    ret = ret || this.checkLetter(word, 1, x, y, [-1, -1]);\r\n    ret = ret || this.checkLetter(word, 1, x, y, [-1, 0]);\r\n    ret = ret || this.checkLetter(word, 1, x, y, [-1, 1]);\r\n    ret = ret || this.checkLetter(word, 1, x, y, [0, -1]);\r\n    ret = ret || this.checkLetter(word, 1, x, y, [0, 1]);\r\n    ret = ret || this.checkLetter(word, 1, x, y, [1, -1]);\r\n    ret = ret || this.checkLetter(word, 1, x, y, [1, 0]);\r\n    ret = ret || this.checkLetter(word, 1, x, y, [1, 1]);\r\n    return ret;\r\n  }\r\n\r\n\r\n  checkLetter(word: string, index: number, x: number, y: number, vector: [number, number]): [number, number] | null {\r\n    const nx = x + vector[0];\r\n    const ny = y + vector[1];\r\n    if (index >= word.length) {\r\n\r\n      return [x, y];\r\n    }\r\n    if (nx < 0 || nx >= this.width || ny < 0 || ny >= this.height) {\r\n      return null;\r\n    }\r\n    if (this.getLetter(nx, ny) == word[index]) {\r\n      return this.checkLetter(word, index + 1, nx, ny, vector);\r\n    }\r\n    else {\r\n      return null;\r\n    }\r\n  }\r\n}","export class Gradient {\r\n  constructor(private stops: [number, number, number][], \r\n              private positions: number[]) {}\r\n\r\n  eval(n: number) {\r\n    let index = 0;\r\n    if (n == 0) {\r\n      return this.stops[0]\r\n    }\r\n    while (n > this.positions[index]) \r\n      index++\r\n    const r = (n - this.positions[index - 1]) / (this.positions[index] - this.positions[index - 1])\r\n    return (this.stops[index - 1].map((c,i) => c + (this.stops[index][i] - c) * r));\r\n  }\r\n\r\n  static stoplight() {\r\n    return new Gradient([[255, 127, 127], [255, 0, 0], [0, 255, 0]], [0, .5, 1]);\r\n  }\r\n}","import { BWImage } from \"./bw-image-reader\";\r\nimport { ImageReader } from \"./image-reader\";\r\nimport * as tf from '@tensorflow/tfjs';\r\nimport { WordSearch } from \"./solver\";\r\nimport { Gradient } from \"./gradient\";\r\nimport { Contexts } from \"../components/read-and-solve\";\r\n\r\nconst alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\r\ntype Inference = [string, number][];\r\n\r\nexport function analyzeImage(img: ImageReader, words: string[], contexts: Contexts) {\r\n  console.log('analyzeImage');\r\n  return new Promise<WordSearch>(async (resolve, reject) => {\r\n    const bw = BWImage.fromColor(img);\r\n    const toFill = bw.copy();\r\n    const hiContrast = BWImage.newBlank(bw.width, bw.height);\r\n\r\n    const nPixels = bw.width * bw.height;\r\n    const threshhold = toFill.getAverageColor() - 25;\r\n    const corners = { l: toFill.width, r: 0, t: toFill.height, b: 0 }\r\n    const boxes = [];\r\n    let c = 0;\r\n    for (let i = 0; i < nPixels; i++) {\r\n      if (toFill.getPixeli(i) < threshhold) {\r\n        corners.l = toFill.width;\r\n        corners.r = 0;\r\n        corners.t = toFill.height;\r\n        corners.b = 0;\r\n        toFill.fillFromi(i, threshhold, corners, hiContrast)\r\n        boxes.push([corners.l, corners.r, corners.t, corners.b])\r\n        c++\r\n      }\r\n    }\r\n    const maxHeight = boxes.reduce((max, i) => Math.max(max, i[3] - i[2]), 0);\r\n    const filteredBoxes = boxes.filter((b) => b[3] - b[2] > maxHeight * 0.5);\r\n\r\n    filteredBoxes.sort((a, b) => a[2] - b[2] > maxHeight ? 1 : a[0] - b[0])\r\n    const ws = await analyzeBoxes(hiContrast, filteredBoxes, words, contexts);\r\n    resolve(ws);\r\n  })\r\n}\r\n\r\nasync function analyzeBoxes(hiContrast: BWImage, boxes: number[][], words: string[], contexts: Contexts) {\r\n  console.log('analyzeBoxes')\r\n  const cropBoxes = new Float32Array(boxes.length * 4);\r\n  const EXTRA_PAD = 5;\r\n  const w = hiContrast.width - 1;\r\n  const h = hiContrast.height - 1;\r\n  boxes.forEach((b, i) => {\r\n    const dx = b[1] - b[0]\r\n    const dy = b[3] - b[2]\r\n    const max = Math.max(dx, dy);\r\n    const padX = Math.ceil((max - dx) / 2) + EXTRA_PAD;\r\n    const padY = Math.ceil((max - dy) / 2) + EXTRA_PAD;\r\n    const x1 = b[0] - padX;\r\n    const y1 = b[2] - padY;\r\n    const x2 = b[1] + padX;\r\n    const y2 = b[3] + padY;\r\n    cropBoxes[i * 4] = y1 / h;\r\n    cropBoxes[i * 4 + 1] = x1 / w;\r\n    cropBoxes[i * 4 + 2] = y2 / h;\r\n    cropBoxes[i * 4 + 3] = x2 / w;\r\n  })\r\n\r\n  const boxIndices = new Int32Array(boxes.length).fill(0);\r\n\r\n  const allImageData = hiContrast.getData();\r\n\r\n  // move arrays into tensors to crop the image into letters \r\n  const imageTensor: tf.Tensor<tf.Rank.R4> = tf.tensor(allImageData, [1, hiContrast.height, hiContrast.width, 1]);\r\n  const boxTensor: tf.Tensor<tf.Rank.R2> = tf.tensor(cropBoxes, [boxes.length, 4]);\r\n  const boxIndicesTensor: tf.Tensor<tf.Rank.R1> = tf.tensor(boxIndices, [boxes.length]);\r\n  const CROP_SIZE: [number, number] = [28, 28]\r\n  \r\n  console.log(1, hiContrast.height, hiContrast.width, 1);\r\n  console.log(boxes.length, 4);\r\n  console.log(boxes.length);\r\n\r\n  // separate images of each letter and send them to tf model\r\n  const resizedTensor = tf.image.cropAndResize(imageTensor, boxTensor, boxIndicesTensor, CROP_SIZE);\r\n  console.log(resizedTensor.shape);\r\n  const letters = await infer(resizedTensor);\r\n\r\n  // put boxes on box canvas\r\n  contexts.box.canvas.width = contexts.img.canvas.width;\r\n  contexts.box.canvas.height = contexts.img.canvas.height;\r\n  const g = Gradient.stoplight();\r\n  contexts.box.lineWidth = 5;\r\n  boxes.forEach((b, i) => {\r\n    contexts.box.strokeStyle = `rgb(${g.eval(letters[i][1]).join(',')})`;\r\n    contexts.box.beginPath();\r\n    contexts.box.rect(b[0] - 3, b[2] - 3, b[1] - b[0] + 3, b[3] - b[2] + 3)\r\n    contexts.box.stroke();\r\n  });\r\n\r\n  // find width and height of puzzle\r\n  let width = 0;\r\n  while (boxes[width][0] < boxes[width + 1][0]) width++;\r\n  width++;\r\n  const height = boxes.length / width;\r\n  const confidences = letters.map(l => l[1]);\r\n  console.log(width, height);\r\n\r\n  return new WordSearch(letters.map(l => l[0]), width, height, words, confidences, boxes);\r\n\r\n  // contexts.line.canvas.width = contexts.img.canvas.width;\r\n  // contexts.line.canvas.height = contexts.img.canvas.height;\r\n  // contexts.line.lineWidth = 5;\r\n  // contexts.line.strokeStyle = '#5555FFFF';\r\n  // solutions.forEach(s => {\r\n  //   const start = boxes[s.start[0] + s.start[1] * width];\r\n  //   const end = boxes[s.end[0] + s.end[1] * width];\r\n  //   contexts.line.beginPath();\r\n  //   contexts.line.moveTo(start[0] + (start[1] - start[0]) / 2, start[2] + (start[3] - start[2]) / 2)\r\n  //   contexts.line.lineTo(end[0] + (end[1] - end[0]) / 2, end[2] + (end[3] - end[2]) / 2)\r\n  //   contexts.line.stroke();\r\n  // })\r\n\r\n  // contexts.letter.canvas.width = contexts.img.canvas.width;\r\n  // contexts.letter.canvas.height = contexts.img.canvas.height;\r\n  // contexts.letter.font = \"bold 30px Arial\";\r\n  // contexts.letter.fillStyle = '#FF0077FF';\r\n  // boxes.forEach((s, i) => {\r\n  //   contexts.letter.fillText(letters[i][0], s[0], s[3]);\r\n  // })\r\n}\r\n\r\nfunction infer(t: tf.Tensor<tf.Rank.R4>) {\r\n  console.log('Inferring')\r\n  return new Promise<Inference>(async (resolve, reject) => {\r\n    const model = await tf.loadGraphModel('./models/bw_no_rotate/model.json');\r\n    const out = model.predict(t) as tf.Tensor<tf.Rank>;\r\n    console.log(out.shape);\r\n    const ds = out.dataSync();\r\n    const maxes = Array.from(tf.argMax(out, 1).dataSync());\r\n    // scale output values linearly between 0 and 1\r\n    const normalized = normalize(ds, 0, 1);\r\n    resolve (maxes.map((o, i) => [alphabet[o], arrayMax(normalized.slice(26 * i, 26 * (i + 1)))]))\r\n  })\r\n}\r\n\r\n\r\n\r\n// function showFromTensor(tensor, imageNumber, canvasNum) {\r\n//   const shape = tensor.shape;\r\n//   const data = tensor.dataSync();\r\n//   const imSize = shape[1] * shape[2] * shape[3];\r\n//   const canvasSize = shape[1] * shape[2] * 4;\r\n//   const pixels = new Uint8Array(canvasSize)\r\n//   let c = 0;\r\n//   for (let i = 0; i < imSize; i++) {\r\n//     pixels[c++] = data[i + imageNumber * imSize];\r\n//     pixels[c++] = data[i + imageNumber * imSize];\r\n//     pixels[c++] = data[i + imageNumber * imSize];\r\n//     pixels[c++] = 255;\r\n//   }\r\n//   const canvas2 = document.getElementById('canvas' + canvasNum);\r\n//   const ctx = canvas2.getContext('2d');\r\n//   canvas2.width = shape[2];\r\n//   canvas2.height = shape[1];\r\n\r\n//   const idata = ctx.createImageData(shape[2], shape[1]);\r\n//   idata.data.set(pixels);\r\n\r\n//   ctx.putImageData(idata, 0, 0);\r\n// }\r\n\r\nfunction normalize(data: Float32Array | Int32Array | Uint8Array | number[], a: number, b: number) {\r\n  console.log(data)\r\n  const max = arrayMax(data)\r\n  const min = arrayMin(data)\r\n  console.log(max, min)\r\n  return data.map(d => ((d - min) / (max - min)) * (b - a) + a)\r\n}\r\n\r\n\r\nfunction arrayMax(a: Float32Array | Int32Array | Uint8Array | number[]) {\r\n  let m = a[0];\r\n  for (let i = 1; i < a.length; i++) {\r\n    if (a[i] > m)\r\n      m = a[i]\r\n  }\r\n  return m;\r\n}\r\n\r\nfunction arrayMin(a: Float32Array | Int32Array | Uint8Array | number[]) {\r\n  let m = a[0];\r\n  for (let i = 1; i < a.length; i++) {\r\n    if (a[i] < m)\r\n      m = a[i]\r\n  }\r\n  return m;\r\n}","import React, { useEffect, useRef, useState } from \"react\";\r\nimport { ImageReader } from \"../logic/image-reader\";\r\nimport { analyzeImage } from \"../logic/read-and-solve\";\r\nimport englishwords from \"../logic/usa2.json\";\r\nimport '../App.css';\r\nimport { WordSearch } from \"../logic/solver\";\r\nimport Tesseract, { recognize } from \"tesseract.js\";\r\nimport { Gradient } from \"../logic/gradient\";\r\nexport type Contexts = {\r\n  img: CanvasRenderingContext2D,\r\n  box: CanvasRenderingContext2D,\r\n  letter: CanvasRenderingContext2D,\r\n  line: CanvasRenderingContext2D\r\n}\r\n\r\nexport type ImageLetter = {\r\n  l: number, r: number, t: number, b: number,\r\n  letter: string,\r\n\r\n}\r\n\r\nexport function WordsearchSolver() {\r\n  const imgCanvas = useRef<HTMLCanvasElement>(null);\r\n  const boxCanvas = useRef<HTMLCanvasElement>(null);\r\n  const letterCanvas = useRef<HTMLCanvasElement>(null);\r\n  const lineCanvas = useRef<HTMLCanvasElement>(null);\r\n  const [puzzle, setPuzzle] = useState<WordSearch>();\r\n  const [wordString, setWordString] = useState<string>('');\r\n  const [imgVisible, setImgVisible] = useState<boolean>(true);\r\n  const [boxesVisible, setBoxesVisible] = useState<boolean>(false);\r\n  const [linesVisible, setLinesVisible] = useState<boolean>(true);\r\n  const [lettersVisible, setLettersVisible] = useState<boolean>(false);\r\n  const [rescaleVal, setRescaleVal] = useState<number>(1);\r\n  const [letterOffset, setLetterOffset] = useState<number>(0);\r\n  const [letterStyle, setLetterStyle] = useState<any>();\r\n  const [changeLetterModal, setChangeLetterModal] = useState<{\r\n    ctx: CanvasRenderingContext2D,\r\n    index: number,\r\n    letter: string,\r\n    box: number[],\r\n    puzzleWidth: number\r\n  } | undefined>();\r\n\r\n  useEffect(() => {\r\n    window.addEventListener('resize', rescale);\r\n    return (() => window.removeEventListener('resize', rescale))\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    drawPuzzle();\r\n  }, [puzzle])\r\n\r\n  function test() {\r\n    return `scale(${rescaleVal}) translateX(${letterOffset}px)`\r\n  }\r\n\r\n  useEffect(() => {\r\n    const newLetterStyle = {\r\n      display: toDisp(lettersVisible),\r\n      transform: test()\r\n    };\r\n    setLetterStyle(newLetterStyle)\r\n  }, [lettersVisible, rescaleVal, letterOffset])\r\n\r\n  function readWords(e: React.ChangeEvent<HTMLInputElement>) {\r\n    if (e.target.files?.length && e.target.files.length > 0) {\r\n      const imgPath: string = URL.createObjectURL(e.target.files[0]);\r\n      console.log('REcognizing')\r\n      console.log(imgPath)\r\n      Tesseract.recognize(imgPath, 'eng')\r\n      .then(res => {\r\n        console.log(res);\r\n        setWordString(res.data.text);\r\n      })\r\n      .catch(err => console.log(err));\r\n    } else {\r\n      alert('Invalid file');\r\n    }\r\n  }\r\n\r\n  function onFileInput(e: React.ChangeEvent<HTMLInputElement>) {\r\n    const img = imgCanvas.current?.getContext('2d');\r\n    const box = boxCanvas.current?.getContext('2d');\r\n    const letter = letterCanvas.current?.getContext('2d');\r\n    const line = lineCanvas.current?.getContext('2d');\r\n    if (!(img && box && letter && line)) return;\r\n    const contexts: Contexts = { img, box, letter, line };\r\n    if (e.target.files?.length && e.target.files.length > 0) {\r\n      const f: File = e.target.files[0];\r\n      const image = new Image();\r\n      const url = window.URL || window.webkitURL,\r\n        src = url.createObjectURL(f);\r\n      image.src = src;\r\n      image.onload = () => {\r\n        const screenWidth = window.outerWidth;\r\n        const w = Math.min(screenWidth, 400);\r\n        const h = (w / image.width) * image.height;\r\n        img.canvas.width = image.width;\r\n        img.canvas.height = image.height;\r\n        rescale();\r\n\r\n        img.drawImage(image, 0, 0, image.width, image.height)\r\n        console.log(\"Image size: \", image.width, 'x', image.height)\r\n        const idt = img.getImageData(0, 0, image.width, image.height)\r\n        console.log(idt)\r\n        const imgRead = new ImageReader(image.width, image.height, idt)\r\n        // set loading true\r\n        analyzeImage(imgRead, getWords(), contexts)\r\n          .then((ws) => {\r\n            setPuzzle(ws);\r\n          });\r\n      }\r\n    }\r\n  }\r\n\r\n  function getWords() {\r\n    const words = wordString.split(/[^a-zA-Z0-9]+/);\r\n    if (words[0] == '') words.splice(0, 1);\r\n    if (words[words.length - 1] == '') words.pop();\r\n    if (words.length > 0) {\r\n      console.log(words);\r\n      return words;\r\n    }\r\n    return englishwords.filter(w => w.length > 3);\r\n  }\r\n\r\n  function drawPuzzle() {\r\n    if (!puzzle) return;\r\n    const solutions = puzzle.solve();\r\n    console.log(solutions);\r\n    console.log(\"Found\", solutions.length, \"words out of\", puzzle.getWords().length)\r\n    console.log(puzzle.toString())\r\n\r\n    const imgCtx = imgCanvas.current?.getContext('2d');\r\n    if (!imgCtx) return;\r\n\r\n    const lineCtx = lineCanvas.current?.getContext('2d');\r\n    if (lineCtx) {\r\n      lineCtx.canvas.width = imgCtx.canvas.width;\r\n      lineCtx.canvas.height = imgCtx.canvas.height;\r\n      lineCtx.lineWidth = 5;\r\n      lineCtx.strokeStyle = '#5555FFFF';\r\n      solutions.forEach(s => {\r\n        lineCtx.beginPath();\r\n        lineCtx.moveTo(s.start[0], s.start[1])\r\n        lineCtx.lineTo(s.end[0], s.end[1])\r\n        lineCtx.stroke();\r\n      })\r\n    }\r\n\r\n    const letterCtx = letterCanvas.current?.getContext('2d');\r\n    if (letterCtx) {\r\n      const fontSize = Math.floor(.5 * imgCtx.canvas.width / puzzle.width);\r\n      letterCtx.canvas.width = imgCtx.canvas.width;\r\n      letterCtx.canvas.height = imgCtx.canvas.height;\r\n      letterCtx.font = `bold ${fontSize}px Arial`;\r\n      letterCtx.fillStyle = '#FF0077FF';\r\n      const letters = puzzle.getLetters();\r\n      const g = Gradient.stoplight();\r\n      puzzle.getBoxes().forEach((s, i) => {\r\n        letterCtx.fillStyle = `rgb(${g.eval(puzzle.getConfidence(i)).join(',')})`;\r\n        letterCtx.fillText(letters[i][0], s[0], s[3]);\r\n      });\r\n    }\r\n  }\r\n\r\n  function reSolve() {\r\n    const words = getWords();\r\n    puzzle?.setWords(words);\r\n    const solutions = puzzle?.solve();\r\n    console.log(solutions);\r\n    const lineCtx = lineCanvas.current?.getContext('2d');\r\n    if (!solutions) return;\r\n    lineCtx?.clearRect(0, 0, lineCtx.canvas.width, lineCtx.canvas.height);\r\n    if (lineCtx) {\r\n      lineCtx.lineWidth = 5;\r\n      lineCtx.strokeStyle = '#5555FFFF';\r\n      solutions.forEach(s => {\r\n        lineCtx.beginPath();\r\n        lineCtx.moveTo(s.start[0], s.start[1])\r\n        lineCtx.lineTo(s.end[0], s.end[1])\r\n        lineCtx.stroke();\r\n      })\r\n    }\r\n  }\r\n\r\n  function rescale() {\r\n    // rescale canvases\r\n    const ctx = imgCanvas.current?.getContext('2d');\r\n    if (!ctx) return;\r\n    let xProp = ctx.canvas.width / window.outerWidth;\r\n    const yProp = ctx.canvas.height / window.outerHeight;\r\n    if (window.outerWidth > 768) {\r\n      xProp *= .8;\r\n    }\r\n    const big = Math.max(xProp, yProp);\r\n    setRescaleVal(.9 / big);\r\n  }\r\n\r\n  function canvasClick(e: React.MouseEvent<HTMLCanvasElement, MouseEvent>) {\r\n    const canvas = letterCanvas.current;\r\n    if (!canvas || !puzzle) return;\r\n    const ctx = canvas.getContext('2d');\r\n    if (!ctx) return;\r\n    const rect = canvas.getBoundingClientRect();\r\n    const x = (e.clientX - (rect?.left || 0)) / rescaleVal;\r\n    const y = (e.clientY - (rect?.top || 0)) / rescaleVal;\r\n    console.log(x, y)\r\n    const clicked = puzzle?.inBox(x, y);\r\n    console.log(clicked);\r\n    if (clicked) {\r\n      setChangeLetterModal({\r\n        ctx,\r\n        index: clicked.index,\r\n        letter: clicked.letter,\r\n        box: clicked.box,\r\n        puzzleWidth: puzzle.width\r\n      })\r\n    }\r\n  }\r\n\r\n  function onChangeSumbit(newLetter: string | undefined) {\r\n    if (!changeLetterModal) return;\r\n    if (newLetter) {\r\n      puzzle?.changeLetter(changeLetterModal.index, newLetter);\r\n      reSolve();\r\n    }\r\n    setChangeLetterModal(undefined);\r\n  }\r\n\r\n  const toDisp = (b: boolean) => b ? 'block' : 'none';\r\n  const toColor = (b: boolean) => b ? 'orangered' : 'white';\r\n\r\n  useEffect(() => console.log(letterOffset), [letterOffset])\r\n\r\n  return (\r\n    <div className='flex flex-col md:flex-row'>\r\n      <div className='w-screen max-w-screen grid grid-flow-row justify-center md:justify-start p-4 md:w-1/5 md:flex flex-col items-start md:pl-4'>\r\n        <p className=\"text-white text-left text-sm\">Choose an image of the puzzle</p>\r\n        <input type='file' onChange={(e) => onFileInput(e)} />\r\n        <p className=\"text-white text-left text-sm\">Choose an image of the words to find</p>\r\n        <input type='file' onChange={(e) => readWords(e)} />\r\n        <p className=\"text-white text-left text-sm\">Or type the words to find below, or leave it blank to search for any words</p>\r\n        <div className='w-2/3 mt-4 w-full max-w-xs flex'>\r\n          <textarea className='border-none p-1 bg-blue-50 rounded-xl flex-grow' rows={3} value={wordString} onChange={(e) => setWordString(e.target.value)} />\r\n          <button className='w-8 h-8 bg-blue-600 rounded-lg ml-3 self-end' onClick={reSolve}>✓</button>\r\n        </div>\r\n        {changeLetterModal && <ChangeLetterModal ctx={changeLetterModal.ctx}\r\n          index={changeLetterModal.index}\r\n          letter={changeLetterModal.letter}\r\n          box={changeLetterModal.box}\r\n          puzzleWidth={changeLetterModal.puzzleWidth}\r\n          close={(newLetter) => onChangeSumbit(newLetter)}\r\n        />}\r\n        <button className={`py-1 rounded-xl px-2 my-2 md:my-4 max-w-xs bg-${imgVisible ? 'blue-600' : 'gray-100'} hover:bg-blue-400 transform transition transition-color duration-300`} onClick={() => setImgVisible(!imgVisible)} >Toggle Image</button>\r\n        <button className={`py-1 rounded-xl px-2 my-2 md:my-4 max-w-xs bg-${boxesVisible ? 'blue-600' : 'gray-100'} hover:bg-blue-400 transform transition transition-color duration-300`} onClick={() => setBoxesVisible(!boxesVisible)} >Toggle Boxes</button>\r\n        <button className={`py-1 rounded-xl px-2 my-2 md:my-4 max-w-xs bg-${linesVisible ? 'blue-600' : 'gray-100'} hover:bg-blue-400 transform transition transition-color duration-300`} onClick={() => setLinesVisible(!linesVisible)} >Toggle Solutions</button>\r\n        <button className={`py-1 rounded-xl px-2 my-2 md:my-4 max-w-xs bg-${lettersVisible ? 'blue-600' : 'gray-100'} hover:bg-blue-400 transform transition transition-color duration-300`} onClick={() => setLettersVisible(!lettersVisible)} >Toggle Letters</button>\r\n        <div className='flex flex-row justify-center'>\r\n          <button className={`py-1 rounded-l-xl m-r-1 px-2 my-2 md:my-4 max-w-xs bg-blue-600 hover:bg-blue-400 transform transition transition-color duration-300`} onClick={() => setLetterOffset(letterOffset - 5)} >{'<'}</button>\r\n          <button className={`py-1 rounded-r-xl m-l-1 px-2 my-2 md:my-4 max-w-xs bg-blue-600 hover:bg-blue-400 transform transition transition-color duration-300`} onClick={() => setLetterOffset(letterOffset + 5)} >{'>'}</button>\r\n        </div>\r\n        {/* </div> */}\r\n      </div>\r\n      <div className='flex flex-grow relative justify-center' style={{}}>\r\n        <canvas className='absolute origin-top-center md:origin-top-left md:left-0' ref={imgCanvas} style={{ display: toDisp(imgVisible), transform: `scale(${rescaleVal})` }}></canvas>\r\n        <canvas className='absolute origin-top-center md:origin-top-left md:left-0' ref={boxCanvas} style={{ display: toDisp(boxesVisible), transform: `scale(${rescaleVal})` }}></canvas>\r\n        <canvas className='absolute origin-top-center md:origin-top-left md:left-0' ref={lineCanvas} style={{ display: toDisp(linesVisible), transform: `scale(${rescaleVal})` }}></canvas>\r\n        <canvas className='absolute origin-top-center md:origin-top-left md:left-0' ref={letterCanvas} onClick={e => canvasClick(e)} style={letterStyle}></canvas>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nfunction ChangeLetterModal(props: {\r\n  ctx: CanvasRenderingContext2D,\r\n  index: number,\r\n  letter: string,\r\n  box: number[],\r\n  puzzleWidth: number,\r\n  close: (newLetter?: string) => void\r\n}) {\r\n  const [newLetter, setNewLetter] = useState<string>('');\r\n  function onSubmit() {\r\n    console.log(props.box)\r\n    props.ctx.beginPath();\r\n    props.ctx.clearRect(props.box[0], props.box[2],\r\n      props.box[1] - props.box[0],\r\n      props.box[3] - props.box[2]);\r\n    props.ctx.stroke();\r\n    const fontSize = Math.floor(.5 * props.ctx.canvas.width / props.puzzleWidth);\r\n    props.ctx.font = `bold ${fontSize}px Arial`;\r\n    props.ctx.fillStyle = '#2222FFFF';\r\n    props.ctx.fillText(newLetter, props.box[0], props.box[2] + (props.box[3] - props.box[2]));\r\n    props.close(newLetter);\r\n  }\r\n  return (\r\n    <div className='change-letter-modal'>\r\n      <div>\r\n        <p>Change \"{props.letter}\" to:</p>\r\n        <form onSubmit={onSubmit}>\r\n          <input autoFocus type='text' value={newLetter} onChange={e => setNewLetter(e.target.value[0]?.toUpperCase())}></input>\r\n          <div>\r\n            <button onClick={() => props.close()}>Cancel</button>\r\n            <button onClick={onSubmit} type='submit'>Submit</button>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  )\r\n}","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { WordsearchSolver } from './components/read-and-solve';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <WordsearchSolver />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}